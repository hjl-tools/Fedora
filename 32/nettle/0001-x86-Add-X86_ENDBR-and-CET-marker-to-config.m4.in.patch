From c92d0d0b5f957cc24a802ad6afa8a2d845f2634d Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Fri, 28 Feb 2020 11:51:01 -0800
Subject: [PATCH 1/2] x86: Add X86_ENDBR and CET marker to config.m4.in

---
 ...ENDBR-and-CET-marker-to-config.m4.in.patch | 153 ++++++++++++++++++
 nettle.spec                                   |   1 +
 2 files changed, 154 insertions(+)
 create mode 100644 0001-x86-Add-X86_ENDBR-and-CET-marker-to-config.m4.in.patch

diff --git a/0001-x86-Add-X86_ENDBR-and-CET-marker-to-config.m4.in.patch b/0001-x86-Add-X86_ENDBR-and-CET-marker-to-config.m4.in.patch
new file mode 100644
index 0000000..922cc01
--- /dev/null
+++ b/0001-x86-Add-X86_ENDBR-and-CET-marker-to-config.m4.in.patch
@@ -0,0 +1,153 @@
+From d5f724f9f0768ec9dae163d300e1ab7e286ece85 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Fri, 28 Feb 2020 09:52:08 -0800
+Subject: [PATCH] x86: Add X86_ENDBR and CET marker to config.m4.in
+
+Intel Control-flow Enforcement Technology (CET):
+
+https://software.intel.com/en-us/articles/intel-sdm
+
+contains shadow stack (SHSTK) and indirect branch tracking (IBT).  When
+CET is enabled, ELF object files must be marked with .note.gnu.property
+section.  Also when IBT is enabled, all indirect branch targets must
+start with ENDBR instruction.
+
+This patch adds X86_ENDBR and the CET marker to config.m4.in when CET
+is enabled.  It updates PROLOGUE with X86_ENDBR.
+
+Tested on CET machine with i686 and x86-64.
+
+Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
+---
+ asm.m4       |  2 +-
+ config.m4.in |  4 +++
+ configure.ac | 78 ++++++++++++++++++++++++++++++++++++++++++++++++++++
+ 3 files changed, 83 insertions(+), 1 deletion(-)
+
+diff --git a/asm.m4 b/asm.m4
+index 8da47201..d9099192 100644
+--- a/asm.m4
++++ b/asm.m4
+@@ -32,7 +32,7 @@ define(<GMP_NUMB_BITS>,<>)dnl
+ define(<PROLOGUE>,
+ <.globl C_NAME($1)
+ DECLARE_FUNC(C_NAME($1))
+-C_NAME($1):>)
++C_NAME($1): X86_ENDBR>)
+ 
+ define(<EPILOGUE>,
+ <ifelse(ELF_STYLE,yes,
+diff --git a/config.m4.in b/config.m4.in
+index 11f90a40..5c809b24 100644
+--- a/config.m4.in
++++ b/config.m4.in
+@@ -8,6 +8,10 @@ define(<ALIGN_LOG>, <@ASM_ALIGN_LOG@>)dnl
+ define(<W64_ABI>, <@W64_ABI@>)dnl
+ define(<RODATA>, <@ASM_RODATA@>)dnl
+ define(<WORDS_BIGENDIAN>, <@ASM_WORDS_BIGENDIAN@>)dnl
++define(<X86_ENDBR>,<@X86_ENDBR@>)dnl
++divert(1)
++@X86_GNU_PROPERTY@
++divert
+ divert(1)
+ @ASM_MARK_NOEXEC_STACK@
+ divert
+diff --git a/configure.ac b/configure.ac
+index 3547cae4..db699517 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -814,6 +814,82 @@ EOF
+   ASM_ALIGN_LOG="$nettle_cv_asm_align_log"
+ fi
+ 
++dnl  Define
++dnl  1. X86_ENDBR for endbr32/endbr64.
++dnl  2. X86_GNU_PROPERTY to add a .note.gnu.property section to mark
++dnl  Intel CET support if needed.
++dnl	.section ".note.gnu.property", "a"
++dnl	.p2align POINTER-ALIGN
++dnl	.long 1f - 0f
++dnl	.long 4f - 1f
++dnl	.long 5
++dnl 0:
++dnl	.asciz "GNU"
++dnl 1:
++dnl	.p2align POINTER-ALIGN
++dnl	.long 0xc0000002
++dnl	.long 3f - 2f
++dnl 2:
++dnl	.long 3
++dnl 3:
++dnl	.p2align POINTER-ALIGN
++dnl 4:
++AC_CACHE_CHECK([if Intel CET is enabled],
++  [nettle_cv_asm_x86_intel_cet],
++  [AC_TRY_COMPILE([
++#ifndef __CET__
++#error Intel CET is not enabled
++#endif
++  ], [],
++  [nettle_cv_asm_x86_intel_cet=yes],
++  [nettle_cv_asm_x86_intel_cet=no])])
++if test "$nettle_cv_asm_x86_intel_cet" = yes; then
++  case $ABI in
++  32|standard)
++    X86_ENDBR=endbr32
++    p2align=2
++    ;;
++  64)
++    X86_ENDBR=endbr64
++    p2align=3
++    ;;
++  x32)
++    X86_ENDBR=endbr64
++    p2align=2
++    ;;
++  esac
++  AC_CACHE_CHECK([if .note.gnu.property section is needed],
++    [nettle_cv_asm_x86_gnu_property],
++    [AC_TRY_COMPILE([
++#if !defined __ELF__ || !defined __CET__
++#error GNU property is not needed
++#endif
++    ], [],
++    [nettle_cv_asm_x86_gnu_property=yes],
++    [nettle_cv_asm_x86_gnu_property=no])])
++else
++  nettle_cv_asm_x86_gnu_property=no
++fi
++if test "$nettle_cv_asm_x86_gnu_property" = yes; then
++  X86_GNU_PROPERTY="
++	.section \".note.gnu.property\", \"a\"
++	.p2align $p2align
++	.long 1f - 0f
++	.long 4f - 1f
++	.long 5
++0:
++	.asciz \"GNU\"
++1:
++	.p2align $p2align
++	.long 0xc0000002
++	.long 3f - 2f
++2:
++	.long 3
++3:
++	.p2align $p2align
++4:"
++fi
++
+ AC_SUBST(ASM_SYMBOL_PREFIX)
+ AC_SUBST(ASM_ELF_STYLE)
+ AC_SUBST(ASM_COFF_STYLE)
+@@ -824,6 +900,8 @@ AC_SUBST(ASM_ALIGN_LOG)
+ AC_SUBST(W64_ABI)
+ AC_SUBST(ASM_WORDS_BIGENDIAN)
+ AC_SUBST(EMULATOR)
++AC_SUBST(X86_ENDBR)
++AC_SUBST(X86_GNU_PROPERTY)
+ 
+ AC_SUBST(LIBNETTLE_MAJOR)
+ AC_SUBST(LIBNETTLE_MINOR)
+-- 
+2.24.1
+
diff --git a/nettle.spec b/nettle.spec
index 0cf2d2f..d71d1a3 100644
--- a/nettle.spec
+++ b/nettle.spec
@@ -1,3 +1,4 @@
+Patch100000: 0001-x86-Add-X86_ENDBR-and-CET-marker-to-config.m4.in.patch
 # Recent so-version, so we do not bump accidentally.
 %global nettle_so_ver 7
 %global hogweed_so_ver 5
-- 
2.25.1

