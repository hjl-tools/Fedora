From 81e3f1bb77984225bf46002ca654c3008c47f912 Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Fri, 21 Feb 2020 10:00:57 -0800
Subject: [PATCH 1/2] Insert ENDBR64 at entries of jitted code

1. x86: Add endbr and notrack.
2. Add notrack prefix before indirect call/jmp.
---
 0001-x86-Add-endbr-and-notrack.patch          | 64 +++++++++++++
 ...rack-prefix-before-indirect-call-jmp.patch | 50 +++++++++++
 ...rt-ENDBR64-at-entries-of-jitted-code.patch | 90 +++++++++++++++++++
 mozjs60.spec                                  |  8 ++
 4 files changed, 212 insertions(+)
 create mode 100644 0001-x86-Add-endbr-and-notrack.patch
 create mode 100644 0002-Add-notrack-prefix-before-indirect-call-jmp.patch
 create mode 100644 0003-Insert-ENDBR64-at-entries-of-jitted-code.patch

diff --git a/0001-x86-Add-endbr-and-notrack.patch b/0001-x86-Add-endbr-and-notrack.patch
new file mode 100644
index 0000000..d39a3e8
--- /dev/null
+++ b/0001-x86-Add-endbr-and-notrack.patch
@@ -0,0 +1,64 @@
+From 6e83d457efc9f1c36483c6e557a4a4376c0a4500 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Thu, 20 Feb 2020 03:46:53 -0800
+Subject: [PATCH 1/3] x86: Add endbr and notrack
+
+---
+ js/src/jit/x86-shared/Assembler-x86-shared.h     |  1 +
+ js/src/jit/x86-shared/BaseAssembler-x86-shared.h | 15 +++++++++++++++
+ js/src/jit/x86-shared/Encoding-x86-shared.h      |  1 +
+ 3 files changed, 17 insertions(+)
+
+diff --git a/js/src/jit/x86-shared/Assembler-x86-shared.h b/js/src/jit/x86-shared/Assembler-x86-shared.h
+index e86f9d03ebd1..f91b83d738f7 100644
+--- a/js/src/jit/x86-shared/Assembler-x86-shared.h
++++ b/js/src/jit/x86-shared/Assembler-x86-shared.h
+@@ -904,6 +904,7 @@ class AssemblerX86Shared : public AssemblerShared {
+  public:
+   void nop() { masm.nop(); }
+   void nop(size_t n) { masm.insert_nop(n); }
++  void endbr() { masm.endbr(); }
+   void j(Condition cond, Label* label) { jSrc(cond, label); }
+   void jmp(Label* label) { jmpSrc(label); }
+   void j(Condition cond, RepatchLabel* label) { jSrc(cond, label); }
+diff --git a/js/src/jit/x86-shared/BaseAssembler-x86-shared.h b/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
+index 5cf624f1aa42..5276a6cb8a50 100644
+--- a/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
++++ b/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
+@@ -63,6 +63,21 @@ class BaseAssembler : public GenericAssembler {
+     m_formatter.oneByteOp(OP_NOP);
+   }
+ 
++  void endbr() {
++#if defined(JS_CODEGEN_X86)
++    spew("endbr32");
++    m_formatter.int32Constant(0xfb1e0ff3);
++#else
++    spew("endbr64");
++    m_formatter.int32Constant(0xfa1e0ff3);
++#endif
++  }
++
++  void notrack() {
++    spew("notrack");
++    m_formatter.oneByteOp(PRE_NOTRACK);
++  }
++
+   void comment(const char* msg) { spew("; %s", msg); }
+ 
+   MOZ_MUST_USE JmpSrc twoByteNop() {
+diff --git a/js/src/jit/x86-shared/Encoding-x86-shared.h b/js/src/jit/x86-shared/Encoding-x86-shared.h
+index 72c486fbfcca..da895076b879 100644
+--- a/js/src/jit/x86-shared/Encoding-x86-shared.h
++++ b/js/src/jit/x86-shared/Encoding-x86-shared.h
+@@ -83,6 +83,7 @@ enum OneByteOpcodeID {
+   OP_CMP_EvGv = 0x39,
+   OP_CMP_GvEv = 0x3B,
+   OP_CMP_EAXIv = 0x3D,
++  PRE_NOTRACK = 0x3E,
+ #ifdef JS_CODEGEN_X64
+   PRE_REX = 0x40,
+ #endif
+-- 
+2.24.1
+
diff --git a/0002-Add-notrack-prefix-before-indirect-call-jmp.patch b/0002-Add-notrack-prefix-before-indirect-call-jmp.patch
new file mode 100644
index 0000000..5a65bbc
--- /dev/null
+++ b/0002-Add-notrack-prefix-before-indirect-call-jmp.patch
@@ -0,0 +1,50 @@
+From 6664c3bda63f0289c68ab338ec6997dd0f0f1c74 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Fri, 21 Feb 2020 03:50:22 -0800
+Subject: [PATCH 2/3] Add notrack prefix before indirect call/jmp
+
+---
+ js/src/jit/x86-shared/BaseAssembler-x86-shared.h | 5 +++++
+ 1 file changed, 5 insertions(+)
+
+diff --git a/js/src/jit/x86-shared/BaseAssembler-x86-shared.h b/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
+index 5276a6cb8a50..cb88e4cef838 100644
+--- a/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
++++ b/js/src/jit/x86-shared/BaseAssembler-x86-shared.h
+@@ -2443,11 +2443,13 @@ class BaseAssembler : public GenericAssembler {
+   }
+ 
+   void call_r(RegisterID dst) {
++    notrack();
+     m_formatter.oneByteOp(OP_GROUP5_Ev, dst, GROUP5_OP_CALLN);
+     spew("call       *%s", GPRegName(dst));
+   }
+ 
+   void call_m(int32_t offset, RegisterID base) {
++    notrack();
+     spew("call       *" MEM_ob, ADDR_ob(offset, base));
+     m_formatter.oneByteOp(OP_GROUP5_Ev, offset, base, GROUP5_OP_CALLN);
+   }
+@@ -2485,16 +2487,19 @@ class BaseAssembler : public GenericAssembler {
+   }
+ 
+   void jmp_r(RegisterID dst) {
++    notrack();
+     spew("jmp        *%s", GPRegName(dst));
+     m_formatter.oneByteOp(OP_GROUP5_Ev, dst, GROUP5_OP_JMPN);
+   }
+ 
+   void jmp_m(int32_t offset, RegisterID base) {
++    notrack();
+     spew("jmp        *" MEM_ob, ADDR_ob(offset, base));
+     m_formatter.oneByteOp(OP_GROUP5_Ev, offset, base, GROUP5_OP_JMPN);
+   }
+ 
+   void jmp_m(int32_t offset, RegisterID base, RegisterID index, int scale) {
++    notrack();
+     spew("jmp        *" MEM_obs, ADDR_obs(offset, base, index, scale));
+     m_formatter.oneByteOp(OP_GROUP5_Ev, offset, base, index, scale,
+                           GROUP5_OP_JMPN);
+-- 
+2.24.1
+
diff --git a/0003-Insert-ENDBR64-at-entries-of-jitted-code.patch b/0003-Insert-ENDBR64-at-entries-of-jitted-code.patch
new file mode 100644
index 0000000..eea4964
--- /dev/null
+++ b/0003-Insert-ENDBR64-at-entries-of-jitted-code.patch
@@ -0,0 +1,90 @@
+From 184f6c0259e0e2e883e5736102dc81bdfa26cf96 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Fri, 21 Feb 2020 06:22:06 -0800
+Subject: [PATCH 3/3] Insert ENDBR64 at entries of jitted code
+
+---
+ js/src/irregexp/NativeRegExpMacroAssembler.cpp | 5 +++++
+ js/src/jit/x64/MacroAssembler-x64.cpp          | 3 +++
+ js/src/jit/x64/Trampoline-x64.cpp              | 3 +++
+ js/src/vm/UnboxedObject.cpp                    | 4 ++++
+ js/src/wasm/WasmStubs.cpp                      | 4 ++++
+ 5 files changed, 19 insertions(+)
+
+diff --git a/js/src/irregexp/NativeRegExpMacroAssembler.cpp b/js/src/irregexp/NativeRegExpMacroAssembler.cpp
+index 3d85c54d8bef..a0c51094d5d5 100644
+--- a/js/src/irregexp/NativeRegExpMacroAssembler.cpp
++++ b/js/src/irregexp/NativeRegExpMacroAssembler.cpp
+@@ -93,6 +93,11 @@ NativeRegExpMacroAssembler::NativeRegExpMacroAssembler(JSContext* cx, LifoAlloc*
+             temp1.name(),
+             temp2.name());
+ 
++#if defined(JS_CODEGEN_X86) || defined(JS_CODEGEN_X64)
++    // Generate ENDBR32/ENDB64 at indirect branch target.
++    masm.endbr();
++#endif
++
+     savedNonVolatileRegisters = SavedNonVolatileRegisters(regs);
+ 
+     masm.jump(&entry_label_);
+diff --git a/js/src/jit/x64/MacroAssembler-x64.cpp b/js/src/jit/x64/MacroAssembler-x64.cpp
+index 196b7b5de1c7..ca807b590c9b 100644
+--- a/js/src/jit/x64/MacroAssembler-x64.cpp
++++ b/js/src/jit/x64/MacroAssembler-x64.cpp
+@@ -291,6 +291,9 @@ void MacroAssembler::callWithABIPre(uint32_t* stackAdjust, bool callFromWasm) {
+   MOZ_ASSERT(inCall_);
+   uint32_t stackForCall = abiArgs_.stackBytesConsumedSoFar();
+ 
++  // Generate ENDBR64 at indirect branch target.
++  endbr();
++
+   if (dynamicAlignment_) {
+     // sizeof(intptr_t) accounts for the saved stack pointer pushed by
+     // setupUnalignedABICall.
+diff --git a/js/src/jit/x64/Trampoline-x64.cpp b/js/src/jit/x64/Trampoline-x64.cpp
+index 19b66259dcaa..f674e468a00f 100644
+--- a/js/src/jit/x64/Trampoline-x64.cpp
++++ b/js/src/jit/x64/Trampoline-x64.cpp
+@@ -35,6 +35,9 @@ static const LiveRegisterSet AllRegs =
+ void JitRuntime::generateEnterJIT(JSContext* cx, MacroAssembler& masm) {
+   enterJITOffset_ = startTrampolineCode(masm);
+ 
++  // Generate ENDBR64 at indirect branch target.
++  masm.endbr();
++
+   masm.assertStackAlignment(ABIStackAlignment,
+                             -int32_t(sizeof(uintptr_t)) /* return address */);
+ 
+diff --git a/js/src/vm/UnboxedObject.cpp b/js/src/vm/UnboxedObject.cpp
+index 35ca20d7405f..ac8ce526cc39 100644
+--- a/js/src/vm/UnboxedObject.cpp
++++ b/js/src/vm/UnboxedObject.cpp
+@@ -75,6 +75,10 @@ static const uintptr_t CLEAR_CONSTRUCTOR_CODE_TOKEN = 0x1;
+   MacroAssembler masm;
+ 
+   Register propertiesReg, newKindReg;
++#if defined(JS_CODEGEN_X86) || defined(JS_CODEGEN_X64)
++  // Generate ENDBR32/ENDB64 at indirect branch target.
++  masm.endbr();
++#endif
+ #ifdef JS_CODEGEN_X86
+   propertiesReg = eax;
+   newKindReg = ecx;
+diff --git a/js/src/wasm/WasmStubs.cpp b/js/src/wasm/WasmStubs.cpp
+index 28ec9ad69d0f..255d028f4738 100644
+--- a/js/src/wasm/WasmStubs.cpp
++++ b/js/src/wasm/WasmStubs.cpp
+@@ -274,6 +274,10 @@ static bool GenerateInterpEntry(MacroAssembler& masm, const FuncExport& fe,
+ #ifdef JS_USE_LINK_REGISTER
+   masm.pushReturnAddress();
+ #endif
++#if defined(JS_CODEGEN_X86) || defined(JS_CODEGEN_X64)
++  // Generate ENDBR32/ENDB64 at indirect branch target.
++  masm.endbr();
++#endif
+ 
+   // Save all caller non-volatile registers before we clobber them here and in
+   // the wasm callee (which does not preserve non-volatile registers).
+-- 
+2.24.1
+
diff --git a/mozjs60.spec b/mozjs60.spec
index 6eaf989..6579b83 100644
--- a/mozjs60.spec
+++ b/mozjs60.spec
@@ -1,3 +1,7 @@
+Patch100001: 0001-x86-Add-endbr-and-notrack.patch
+Patch100002: 0002-Add-notrack-prefix-before-indirect-call-jmp.patch
+Patch100003: 0003-Insert-ENDBR64-at-entries-of-jitted-code.patch
+
 %global major 60
 
 # Enable LTO
@@ -116,6 +120,10 @@ pushd ../..
 %patch31 -p1
 %endif
 
+%patch100001 -p1
+%patch100002 -p1
+%patch100003 -p1
+
 # make sure we don't ever accidentally link against bundled security libs
 rm -rf security/
 popd
-- 
2.26.0

