From 552b0b56c23e7a97bb50d06d89a2fc7e1bb61594 Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Sun, 12 Apr 2020 11:19:48 -0700
Subject: [PATCH 1/2] Apply x86: Restore the frame pointer in word_mode

---
 ...store-the-frame-pointer-in-word_mode.patch | 50 +++++++++++++++++++
 gcc.spec                                      |  4 ++
 2 files changed, 54 insertions(+)
 create mode 100644 0001-x86-Restore-the-frame-pointer-in-word_mode.patch

diff --git a/0001-x86-Restore-the-frame-pointer-in-word_mode.patch b/0001-x86-Restore-the-frame-pointer-in-word_mode.patch
new file mode 100644
index 0000000..bdde35e
--- /dev/null
+++ b/0001-x86-Restore-the-frame-pointer-in-word_mode.patch
@@ -0,0 +1,50 @@
+From c094537cd3379f6d573eb426d7c5850c3f90c8e6 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Sun, 12 Apr 2020 10:02:42 -0700
+Subject: [PATCH] x86: Restore the frame pointer in word_mode
+
+We must restore the frame pointer in word_mode for eh_return epilogues
+since the upper 32 bits of RBP register can have any values.
+
+Tested on Linux/x32 and Linux/x86-64.
+
+	PR target/94556
+	* config/i386/i386.c (ix86_expand_epilogue): Restore the frame
+	pointer in word_mode for eh_return epilogues.
+---
+ gcc/config/i386/i386.c | 12 +++++++++---
+ 1 file changed, 9 insertions(+), 3 deletions(-)
+
+diff --git a/gcc/config/i386/i386.c b/gcc/config/i386/i386.c
+index ca3b7dc06c2..f9c8f75b559 100644
+--- a/gcc/config/i386/i386.c
++++ b/gcc/config/i386/i386.c
+@@ -9052,8 +9052,14 @@ ix86_expand_epilogue (int style)
+ 	      t = plus_constant (Pmode, t, m->fs.fp_offset - UNITS_PER_WORD);
+ 	      emit_insn (gen_rtx_SET (sa, t));
+ 
+-	      t = gen_frame_mem (Pmode, hard_frame_pointer_rtx);
+-	      insn = emit_move_insn (hard_frame_pointer_rtx, t);
++	      /* NB: eh_return epilogues must restore the frame pointer
++		 in word_mode since the upper 32 bits of RBP register
++		 can have any values.  */
++	      t = gen_frame_mem (word_mode, hard_frame_pointer_rtx);
++	      rtx frame_reg = hard_frame_pointer_rtx;
++	      if (Pmode != word_mode)
++		frame_reg = gen_rtx_REG (word_mode, REGNO (frame_reg));
++	      insn = emit_move_insn (frame_reg, t);
+ 
+ 	      /* Note that we use SA as a temporary CFA, as the return
+ 		 address is at the proper place relative to it.  We
+@@ -9068,7 +9074,7 @@ ix86_expand_epilogue (int style)
+ 	      add_reg_note (insn, REG_CFA_DEF_CFA,
+ 			    plus_constant (Pmode, sa, UNITS_PER_WORD));
+ 	      ix86_add_queued_cfa_restore_notes (insn);
+-	      add_reg_note (insn, REG_CFA_RESTORE, hard_frame_pointer_rtx);
++	      add_reg_note (insn, REG_CFA_RESTORE, frame_reg);
+ 	      RTX_FRAME_RELATED_P (insn) = 1;
+ 
+ 	      m->fs.cfa_reg = sa;
+-- 
+2.26.0
+
diff --git a/gcc.spec b/gcc.spec
index bcb98e2..5fcc396 100644
--- a/gcc.spec
+++ b/gcc.spec
@@ -1,3 +1,5 @@
+Patch100001: 0001-x86-Restore-the-frame-pointer-in-word_mode.patch
+
 %global DATE 20200328
 %global gitrev 97ad35f30b0d8ed5376febf09cefa2b93f9dc423
 %global gcc_version 10.0.1
@@ -789,6 +791,8 @@ to NVidia PTX capable devices if available.
 %patch12 -p0 -b .pr93069~
 %patch13 -p0 -b .pr94343~
 
+%patch100001 -p1 -b .frame-reg
+
 echo 'Red Hat %{version}-%{gcc_release}' > gcc/DEV-PHASE
 
 cp -a libstdc++-v3/config/cpu/i{4,3}86/atomicity.h
-- 
2.26.0

