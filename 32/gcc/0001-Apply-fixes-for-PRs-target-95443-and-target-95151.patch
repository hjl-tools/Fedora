From 09e2282adb54aa46e406a35e2574fccf7a80890a Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Sat, 17 Oct 2020 10:26:44 -0700
Subject: [PATCH] Apply fixes for PRs target/95443 and target/95151

---
 ...py-of-the-string-length-to-cmpstrnqi.patch | 274 +++++++++++++
 ...glibc_unlikely-with-__builtin_expect.patch |  32 ++
 ...d-cmpmemsi-for-minline-all-stringops.patch | 359 ++++++++++++++++++
 gcc.spec                                      |   6 +
 4 files changed, 671 insertions(+)
 create mode 100644 0001-x86-Pass-a-copy-of-the-string-length-to-cmpstrnqi.patch
 create mode 100644 0002-x86-Replace-__glibc_unlikely-with-__builtin_expect.patch
 create mode 100644 0003-x86-Add-cmpmemsi-for-minline-all-stringops.patch

diff --git a/0001-x86-Pass-a-copy-of-the-string-length-to-cmpstrnqi.patch b/0001-x86-Pass-a-copy-of-the-string-length-to-cmpstrnqi.patch
new file mode 100644
index 0000000..9e2f853
--- /dev/null
+++ b/0001-x86-Pass-a-copy-of-the-string-length-to-cmpstrnqi.patch
@@ -0,0 +1,274 @@
+From 3f4e9221494ab92d8e22e68732b2afd8ec3f437b Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Mon, 13 Jul 2020 10:33:47 -0700
+Subject: [PATCH 1/3] x86: Pass a copy of the string length to cmpstrnqi
+
+cmpstrnsi expander may pass the actual string length directly to cmpstrnqi
+patterns.  For cmpstrnsi, one of the strings must be a constant and
+expand_builtin_strncmp rewrites the length argument to be the minimum of
+the const string length and the actual string length.  But it is not the
+case for cmpmemsi.  Pass a copy of the string length to cmpstrnqi patterns
+to avoid changing the actual string length by cmpstrnqi patterns.
+
+gcc/
+
+	PR target/95443
+	* config/i386/i386.md (cmpstrnsi): Pass a copy of the string
+	length to cmpstrnqi patterns.
+
+gcc/testsuite/
+
+	PR target/95443
+	* gcc.target/i386/pr95443-1.c: New test.
+	* gcc.target/i386/pr95443-2.c: Likewise.
+
+(cherry picked from commit 9cba898481368ce16c6a2d30ef781a82dce27c55)
+---
+ gcc/config/i386/i386.md                   |   6 +-
+ gcc/testsuite/gcc.target/i386/pr95443-1.c | 130 ++++++++++++++++++++++
+ gcc/testsuite/gcc.target/i386/pr95443-2.c |  79 +++++++++++++
+ 3 files changed, 214 insertions(+), 1 deletion(-)
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95443-1.c
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95443-2.c
+
+diff --git a/gcc/config/i386/i386.md b/gcc/config/i386/i386.md
+index c2cf04289a0..3928943e9b2 100644
+--- a/gcc/config/i386/i386.md
++++ b/gcc/config/i386/i386.md
+@@ -17642,7 +17642,11 @@
+   if (addr2 != XEXP (operands[2], 0))
+     operands[2] = replace_equiv_address_nv (operands[2], addr2);
+ 
+-  countreg = ix86_zero_extend_to_Pmode (operands[3]);
++  /* NB: Make a copy of the data length to avoid changing the original
++     data length by cmpstrnqi patterns.  */
++  rtx count = ix86_zero_extend_to_Pmode (operands[3]);
++  countreg = gen_reg_rtx (Pmode);
++  emit_move_insn (countreg, count);
+ 
+   /* %%% Iff we are testing strict equality, we can use known alignment
+      to good advantage.  This may be possible with combine, particularly
+diff --git a/gcc/testsuite/gcc.target/i386/pr95443-1.c b/gcc/testsuite/gcc.target/i386/pr95443-1.c
+new file mode 100644
+index 00000000000..292ff16afdd
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95443-1.c
+@@ -0,0 +1,130 @@
++/* { dg-do run { target mmap } } */
++/* { dg-options "-O2 -minline-all-stringops" } */
++
++#include <stdint.h>
++#include <string.h>
++#include <stdlib.h>
++#include <unistd.h>
++#include <sys/mman.h>
++#ifndef MAP_ANON
++#define MAP_ANON 0
++#endif
++#ifndef MAP_FAILED
++#define MAP_FAILED ((void *)-1)
++#endif
++
++uint8_t shift[256];
++
++static size_t
++__attribute__ ((noclone, noinline))
++hash2(const unsigned char *p)
++{
++  return (((size_t)(p)[0] - ((size_t)(p)[-1] << 3)) % sizeof (shift));
++}
++
++char *
++simple_strstr (const char *haystack, const char *needle)
++{
++  const unsigned char *hs = (const unsigned char *) haystack;
++  const unsigned char *ne = (const unsigned char *) needle;
++  size_t ne_len = strlen ((const char*)ne);
++  size_t hs_len = strnlen ((const char*)hs, ne_len | 512);
++
++  if (hs_len < ne_len)
++    return NULL;
++
++  if (memcmp (hs, ne, ne_len) == 0)
++    return (char *) hs;
++
++  const unsigned char *end = hs + hs_len - ne_len;
++  size_t tmp, shift1;
++  size_t m1 = ne_len - 1;
++  size_t offset = 0;
++
++  memset (shift, 0, sizeof (shift));
++  for (int i = 1; i < m1; i++)
++    shift[hash2 (ne + i)] = i;
++  shift1 = m1 - shift[hash2 (ne + m1)];
++  shift[hash2 (ne + m1)] = m1;
++
++  while (1)
++    {
++      if (__glibc_unlikely (hs > end))
++	{
++	  end += strnlen ((const char*)end + m1 + 1, 2048);
++	  if (hs > end)
++	    return NULL;
++	}
++
++      do
++	{
++	  hs += m1;
++	  tmp = shift[hash2 (hs)];
++	}
++      while (tmp == 0 && hs <= end);
++
++      hs -= tmp;
++      if (tmp < m1)
++	continue;
++
++      if (m1 < 15 || memcmp (hs + offset, ne + offset, 8) == 0)
++	{
++	  if (memcmp (hs, ne, m1) == 0)
++	    return (void *) hs;
++
++	  offset = (offset >= 8 ? offset : m1) - 8;
++	}
++
++      hs += shift1;
++    }
++}
++
++static int
++check_result (const char *s1, const char *s2,
++	      char *exp_result)
++{
++  char *result = simple_strstr (s1, s2);
++  if (result != exp_result)
++    return -1;
++
++  return 0;
++}
++
++void
++__attribute__ ((noclone, noinline))
++check1 (void)
++{
++  const char s1[] =
++    "F_BD_CE_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_C3_88_20_EF_BF_BD_EF_BF_BD_EF_BF_BD_C3_A7_20_EF_BF_BD";
++  const char s2[] = "_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD_EF_BF_BD";
++  char *exp_result;
++
++  exp_result = simple_strstr (s1, s2);
++  if (check_result (s1, s2, exp_result) != 0)
++    abort ();
++}
++
++int
++main (void)
++{
++  unsigned char *buf1, *buf2;
++  size_t page_size = 2 * sysconf(_SC_PAGESIZE);
++  buf1 = mmap (0, (1 + 1) * page_size, PROT_READ | PROT_WRITE,
++	       MAP_PRIVATE | MAP_ANON, -1, 0);
++  if (buf1 == MAP_FAILED)
++    return -1;
++  if (mprotect (buf1 + 1 * page_size, page_size, PROT_NONE))
++    return -1;
++  buf2 = mmap (0, 2 * page_size, PROT_READ | PROT_WRITE,
++	       MAP_PRIVATE | MAP_ANON, -1, 0);
++  if (buf2 == MAP_FAILED)
++    return -1;
++  if (mprotect (buf2 + page_size, page_size, PROT_NONE))
++    return -1;
++
++  memset (buf1, 0xa5, 1 * page_size);
++  memset (buf2, 0x5a, page_size);
++
++  check1 ();
++  return 0;
++}
+diff --git a/gcc/testsuite/gcc.target/i386/pr95443-2.c b/gcc/testsuite/gcc.target/i386/pr95443-2.c
+new file mode 100644
+index 00000000000..23bb13ab7ff
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95443-2.c
+@@ -0,0 +1,79 @@
++/* { dg-do run { target mmap } } */
++/* { dg-options "-O2 -minline-all-stringops" } */
++
++#include <stdint.h>
++#include <string.h>
++#include <stdlib.h>
++#include <unistd.h>
++#include <sys/mman.h>
++#ifndef MAP_ANON
++#define MAP_ANON 0
++#endif
++#ifndef MAP_FAILED
++#define MAP_FAILED ((void *)-1)
++#endif
++
++int ret;
++
++static void
++do_one_test (char *dst, char *src, const char *orig_src, unsigned int len)
++{
++  __builtin_memcpy (src, orig_src, len);
++  __builtin_memmove (dst, src, len);
++
++  if (__builtin_memcmp (dst, orig_src, len) != 0)
++    {
++      ret = 1;
++      return;
++    }
++}
++
++void
++do_test (char *s1, char *s2, int n, unsigned int len)
++{
++  int i;
++  for (i = 0; i < n; i++)
++    do_one_test (s2, s2, s1, len);
++}
++
++int
++main (void)
++{
++  unsigned char *buf1, *buf2;
++  size_t page_size = 2 * sysconf(_SC_PAGESIZE);
++
++  buf1 = mmap (0, (1 + 1) * page_size, PROT_READ | PROT_WRITE,
++	       MAP_PRIVATE | MAP_ANON, -1, 0);
++  if (buf1 == MAP_FAILED)
++    return -1;
++  if (mprotect (buf1 + 1 * page_size, page_size, PROT_NONE))
++    return -1;
++  buf2 = mmap (0, 2 * page_size, PROT_READ | PROT_WRITE,
++	       MAP_PRIVATE | MAP_ANON, -1, 0);
++  if (buf2 == MAP_FAILED)
++    return -1;
++  if (mprotect (buf2 + page_size, page_size, PROT_NONE))
++    return -1;
++
++  memset (buf1, 0xa5, 1 * page_size);
++  memset (buf2, 0x5a, page_size);
++
++  char *s1 = (char *) buf1;
++  char *s2 = (char *) buf2;
++
++  size_t len;
++  size_t i, j;
++  len = 1 << 2;
++  for (i = 0, j = 1; i < len; i++, j += 23)
++    s1[i] = j;
++
++  do_test (s1, s2, 10, 1 << 2);
++
++  len = 1 << 4;
++  for (i = 0, j = 1; i < len; i++, j += 23)
++    s1[i] = j;
++
++  do_test (s1, s2, 10, 1 << 4);
++
++  return ret;
++}
+-- 
+2.26.2
+
diff --git a/0002-x86-Replace-__glibc_unlikely-with-__builtin_expect.patch b/0002-x86-Replace-__glibc_unlikely-with-__builtin_expect.patch
new file mode 100644
index 0000000..312aa6b
--- /dev/null
+++ b/0002-x86-Replace-__glibc_unlikely-with-__builtin_expect.patch
@@ -0,0 +1,32 @@
+From da0aedac32f0159643e42fae5c1be407b26f416e Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Tue, 14 Jul 2020 14:01:51 -0700
+Subject: [PATCH 2/3] x86: Replace __glibc_unlikely with __builtin_expect
+
+Replace glibc specific __glibc_unlikely with __builtin_expect.
+
+	PR target/95443
+	* gcc.target/i386/pr95443-1.c (simple_strstr): Replace
+	__glibc_unlikely with __builtin_expect.
+
+(cherry picked from commit b2984e5ada65f417e8704d2e1e81ccd0272b5eb3)
+---
+ gcc/testsuite/gcc.target/i386/pr95443-1.c | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/gcc/testsuite/gcc.target/i386/pr95443-1.c b/gcc/testsuite/gcc.target/i386/pr95443-1.c
+index 292ff16afdd..698dfa02189 100644
+--- a/gcc/testsuite/gcc.target/i386/pr95443-1.c
++++ b/gcc/testsuite/gcc.target/i386/pr95443-1.c
+@@ -49,7 +49,7 @@ simple_strstr (const char *haystack, const char *needle)
+ 
+   while (1)
+     {
+-      if (__glibc_unlikely (hs > end))
++      if (__builtin_expect (hs > end, 0))
+ 	{
+ 	  end += strnlen ((const char*)end + m1 + 1, 2048);
+ 	  if (hs > end)
+-- 
+2.26.2
+
diff --git a/0003-x86-Add-cmpmemsi-for-minline-all-stringops.patch b/0003-x86-Add-cmpmemsi-for-minline-all-stringops.patch
new file mode 100644
index 0000000..601b3e0
--- /dev/null
+++ b/0003-x86-Add-cmpmemsi-for-minline-all-stringops.patch
@@ -0,0 +1,359 @@
+From 4f6d6917162949b1609fffaa9c0256683e4b3e0a Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Thu, 14 May 2020 13:06:23 -0700
+Subject: [PATCH 3/3] x86: Add cmpmemsi for -minline-all-stringops
+MIME-Version: 1.0
+Content-Type: text/plain; charset=UTF-8
+Content-Transfer-Encoding: 8bit
+
+We used to expand memcmp to "repz cmpsb" via cmpstrnsi.  It was changed
+by
+
+commit 9b0f6f5e511ca512e4faeabc81d2fd3abad9b02f
+Author: Nick Clifton <nickc@redhat.com>
+Date:   Fri Aug 12 16:26:11 2011 +0000
+
+    builtins.c (expand_builtin_memcmp): Do not use cmpstrnsi pattern.
+
+            * builtins.c (expand_builtin_memcmp): Do not use cmpstrnsi
+            pattern.
+            * doc/md.texi (cmpstrn): Note that the comparison stops if both
+            fetched bytes are zero.
+            (cmpstr): Likewise.
+            (cmpmem): Note that the comparison does not stop if both of the
+            fetched bytes are zero.
+
+Duplicate the cmpstrn pattern for cmpmem.  The only difference is that
+the length argument of cmpmem is guaranteed to be less than or equal to
+lengths of 2 memory areas.  Since "repz cmpsb" can be much slower than
+memcmp function implemented with vector instruction, see
+
+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=43052
+
+expand cmpmem to "repz cmpsb" only for -minline-all-stringops.
+
+gcc/
+
+	PR target/95151
+	* config/i386/i386-expand.c (ix86_expand_cmpstrn_or_cmpmem): New
+	function.
+	* config/i386/i386-protos.h (ix86_expand_cmpstrn_or_cmpmem): New
+	prototype.
+	* config/i386/i386.md (cmpmemsi): New pattern.
+
+gcc/testsuite/
+
+	PR target/95151
+	* gcc.target/i386/pr95151-1.c: New test.
+	* gcc.target/i386/pr95151-2.c: Likewise.
+	* gcc.target/i386/pr95151-3.c: Likewise.
+	* gcc.target/i386/pr95151-4.c: Likewise.
+
+(cherry picked from commit 631bbc932a9a4110783efc77663f39baa901f81c)
+---
+ gcc/config/i386/i386-expand.c             | 84 +++++++++++++++++++++++
+ gcc/config/i386/i386-protos.h             |  1 +
+ gcc/config/i386/i386.md                   | 84 ++++++-----------------
+ gcc/testsuite/gcc.target/i386/pr95151-1.c | 17 +++++
+ gcc/testsuite/gcc.target/i386/pr95151-2.c | 10 +++
+ gcc/testsuite/gcc.target/i386/pr95151-3.c | 18 +++++
+ gcc/testsuite/gcc.target/i386/pr95151-4.c | 11 +++
+ 7 files changed, 162 insertions(+), 63 deletions(-)
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95151-1.c
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95151-2.c
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95151-3.c
+ create mode 100644 gcc/testsuite/gcc.target/i386/pr95151-4.c
+
+diff --git a/gcc/config/i386/i386-expand.c b/gcc/config/i386/i386-expand.c
+index 3ee332e6dc6..43a3b46c498 100644
+--- a/gcc/config/i386/i386-expand.c
++++ b/gcc/config/i386/i386-expand.c
+@@ -7669,6 +7669,90 @@ ix86_expand_set_or_cpymem (rtx dst, rtx src, rtx count_exp, rtx val_exp,
+   return true;
+ }
+ 
++/* Expand cmpstrn or memcmp.  */
++
++bool
++ix86_expand_cmpstrn_or_cmpmem (rtx result, rtx src1, rtx src2,
++			       rtx length, rtx align, bool is_cmpstrn)
++{
++  if (optimize_insn_for_size_p () && !TARGET_INLINE_ALL_STRINGOPS)
++    return false;
++
++  /* Can't use this if the user has appropriated ecx, esi or edi.  */
++  if (fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])
++    return false;
++
++  if (is_cmpstrn)
++    {
++      /* For strncmp, length is the maximum length, which can be larger
++	 than actual string lengths.  We can expand the cmpstrn pattern
++	 to "repz cmpsb" only if one of the strings is a constant so
++	 that expand_builtin_strncmp() can write the length argument to
++	 be the minimum of the const string length and the actual length
++	 argument.  Otherwise, "repz cmpsb" may pass the 0 byte.  */
++      tree t1 = MEM_EXPR (src1);
++      tree t2 = MEM_EXPR (src2);
++      if (!((t1 && TREE_CODE (t1) == MEM_REF
++	     && TREE_CODE (TREE_OPERAND (t1, 0)) == ADDR_EXPR
++	     && (TREE_CODE (TREE_OPERAND (TREE_OPERAND (t1, 0), 0))
++		 == STRING_CST))
++	    || (t2 && TREE_CODE (t2) == MEM_REF
++		&& TREE_CODE (TREE_OPERAND (t2, 0)) == ADDR_EXPR
++		&& (TREE_CODE (TREE_OPERAND (TREE_OPERAND (t2, 0), 0))
++		    == STRING_CST))))
++	return false;
++    }
++  else
++    {
++      /* Expand memcmp to "repz cmpsb" only for -minline-all-stringops
++	 since "repz cmpsb" can be much slower than memcmp function
++	 implemented with vector instructions, see
++
++	 https://gcc.gnu.org/bugzilla/show_bug.cgi?id=43052
++       */
++      if (!TARGET_INLINE_ALL_STRINGOPS)
++	return false;
++    }
++
++  rtx addr1 = copy_addr_to_reg (XEXP (src1, 0));
++  rtx addr2 = copy_addr_to_reg (XEXP (src2, 0));
++  if (addr1 != XEXP (src1, 0))
++    src1 = replace_equiv_address_nv (src1, addr1);
++  if (addr2 != XEXP (src2, 0))
++    src2 = replace_equiv_address_nv (src2, addr2);
++
++  /* NB: Make a copy of the data length to avoid changing the original
++     data length by cmpstrnqi patterns.  */
++  length = ix86_zero_extend_to_Pmode (length);
++  rtx lengthreg = gen_reg_rtx (Pmode);
++  emit_move_insn (lengthreg, length);
++
++  /* If we are testing strict equality, we can use known alignment to
++     good advantage.  This may be possible with combine, particularly
++     once cc0 is dead.  */
++  if (CONST_INT_P (length))
++    {
++      if (length == const0_rtx)
++	{
++	  emit_move_insn (result, const0_rtx);
++	  return true;
++	}
++      emit_insn (gen_cmpstrnqi_nz_1 (addr1, addr2, lengthreg, align,
++				     src1, src2));
++    }
++  else
++    {
++      emit_insn (gen_cmp_1 (Pmode, lengthreg, lengthreg));
++      emit_insn (gen_cmpstrnqi_1 (addr1, addr2, lengthreg, align,
++				  src1, src2));
++    }
++
++  rtx out = gen_lowpart (QImode, result);
++  emit_insn (gen_cmpintqi (out));
++  emit_move_insn (result, gen_rtx_SIGN_EXTEND (SImode, out));
++
++  return true;
++}
+ 
+ /* Expand the appropriate insns for doing strlen if not just doing
+    repnz; scasb
+diff --git a/gcc/config/i386/i386-protos.h b/gcc/config/i386/i386-protos.h
+index 44dc53f1856..ae557cc8110 100644
+--- a/gcc/config/i386/i386-protos.h
++++ b/gcc/config/i386/i386-protos.h
+@@ -71,6 +71,7 @@ extern int avx_vperm2f128_parallel (rtx par, machine_mode mode);
+ extern bool ix86_expand_strlen (rtx, rtx, rtx, rtx);
+ extern bool ix86_expand_set_or_cpymem (rtx, rtx, rtx, rtx, rtx, rtx,
+ 				       rtx, rtx, rtx, rtx, bool);
++extern bool ix86_expand_cmpstrn_or_cmpmem (rtx, rtx, rtx, rtx, rtx, bool);
+ 
+ extern bool constant_address_p (rtx);
+ extern bool legitimate_pic_operand_p (rtx);
+diff --git a/gcc/config/i386/i386.md b/gcc/config/i386/i386.md
+index 3928943e9b2..e4a95dc0d7e 100644
+--- a/gcc/config/i386/i386.md
++++ b/gcc/config/i386/i386.md
+@@ -17603,6 +17603,22 @@
+ 	  (const_string "*")))
+    (set_attr "mode" "QI")])
+ 
++(define_expand "cmpmemsi"
++  [(set (match_operand:SI 0 "register_operand" "")
++        (compare:SI (match_operand:BLK 1 "memory_operand" "")
++                    (match_operand:BLK 2 "memory_operand" "") ) )
++   (use (match_operand 3 "general_operand"))
++   (use (match_operand 4 "immediate_operand"))]
++  ""
++{
++  if (ix86_expand_cmpstrn_or_cmpmem (operands[0], operands[1],
++				     operands[2], operands[3],
++				     operands[4], false))
++    DONE;
++  else
++    FAIL;
++})
++
+ (define_expand "cmpstrnsi"
+   [(set (match_operand:SI 0 "register_operand")
+ 	(compare:SI (match_operand:BLK 1 "general_operand")
+@@ -17611,70 +17627,12 @@
+    (use (match_operand 4 "immediate_operand"))]
+   ""
+ {
+-  rtx addr1, addr2, countreg, align, out;
+-
+-  if (optimize_insn_for_size_p () && !TARGET_INLINE_ALL_STRINGOPS)
+-    FAIL;
+-
+-  /* Can't use this if the user has appropriated ecx, esi or edi.  */
+-  if (fixed_regs[CX_REG] || fixed_regs[SI_REG] || fixed_regs[DI_REG])
+-    FAIL;
+-
+-  /* One of the strings must be a constant.  If so, expand_builtin_strncmp()
+-     will have rewritten the length arg to be the minimum of the const string
+-     length and the actual length arg.  If both strings are the same and
+-     shorter than the length arg, repz cmpsb will not stop at the 0 byte and
+-     will incorrectly base the results on chars past the 0 byte.  */
+-  tree t1 = MEM_EXPR (operands[1]);
+-  tree t2 = MEM_EXPR (operands[2]);
+-  if (!((t1 && TREE_CODE (t1) == MEM_REF
+-         && TREE_CODE (TREE_OPERAND (t1, 0)) == ADDR_EXPR
+-         && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t1, 0), 0)) == STRING_CST)
+-      || (t2 && TREE_CODE (t2) == MEM_REF
+-          && TREE_CODE (TREE_OPERAND (t2, 0)) == ADDR_EXPR
+-          && TREE_CODE (TREE_OPERAND (TREE_OPERAND (t2, 0), 0)) == STRING_CST)))
+-    FAIL;
+-
+-  addr1 = copy_addr_to_reg (XEXP (operands[1], 0));
+-  addr2 = copy_addr_to_reg (XEXP (operands[2], 0));
+-  if (addr1 != XEXP (operands[1], 0))
+-    operands[1] = replace_equiv_address_nv (operands[1], addr1);
+-  if (addr2 != XEXP (operands[2], 0))
+-    operands[2] = replace_equiv_address_nv (operands[2], addr2);
+-
+-  /* NB: Make a copy of the data length to avoid changing the original
+-     data length by cmpstrnqi patterns.  */
+-  rtx count = ix86_zero_extend_to_Pmode (operands[3]);
+-  countreg = gen_reg_rtx (Pmode);
+-  emit_move_insn (countreg, count);
+-
+-  /* %%% Iff we are testing strict equality, we can use known alignment
+-     to good advantage.  This may be possible with combine, particularly
+-     once cc0 is dead.  */
+-  align = operands[4];
+-
+-  if (CONST_INT_P (operands[3]))
+-    {
+-      if (operands[3] == const0_rtx)
+-	{
+-	  emit_move_insn (operands[0], const0_rtx);
+-	  DONE;
+-	}
+-      emit_insn (gen_cmpstrnqi_nz_1 (addr1, addr2, countreg, align,
+-				     operands[1], operands[2]));
+-    }
++  if (ix86_expand_cmpstrn_or_cmpmem (operands[0], operands[1],
++				     operands[2], operands[3],
++				     operands[4], true))
++    DONE;
+   else
+-    {
+-      emit_insn (gen_cmp_1 (Pmode, countreg, countreg));
+-      emit_insn (gen_cmpstrnqi_1 (addr1, addr2, countreg, align,
+-				  operands[1], operands[2]));
+-    }
+-
+-  out = gen_lowpart (QImode, operands[0]);
+-  emit_insn (gen_cmpintqi (out));
+-  emit_move_insn (operands[0], gen_rtx_SIGN_EXTEND (SImode, out));
+-
+-  DONE;
++    FAIL;
+ })
+ 
+ ;; Produce a tri-state integer (-1, 0, 1) from condition codes.
+diff --git a/gcc/testsuite/gcc.target/i386/pr95151-1.c b/gcc/testsuite/gcc.target/i386/pr95151-1.c
+new file mode 100644
+index 00000000000..54a7510042a
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95151-1.c
+@@ -0,0 +1,17 @@
++/* { dg-do compile } */
++/* { dg-options "-O2 -minline-all-stringops" } */
++
++struct foo
++{
++  char array[257];
++};
++
++extern struct foo x;
++
++int
++func (struct foo i)
++{
++  return __builtin_memcmp (&x, &i, sizeof (x)) ? 1 : 2;
++}
++
++/* { dg-final { scan-assembler-not "call\[\\t \]*_?memcmp" } } */
+diff --git a/gcc/testsuite/gcc.target/i386/pr95151-2.c b/gcc/testsuite/gcc.target/i386/pr95151-2.c
+new file mode 100644
+index 00000000000..8f9d8ee1bf4
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95151-2.c
+@@ -0,0 +1,10 @@
++/* { dg-do compile } */
++/* { dg-options "-O2 -minline-all-stringops" } */
++
++int
++func (void *d, void *s, unsigned int l)
++{
++  return __builtin_memcmp (d, s, l) ? 1 : 2;
++}
++
++/* { dg-final { scan-assembler-not "call\[\\t \]*_?memcmp" } } */
+diff --git a/gcc/testsuite/gcc.target/i386/pr95151-3.c b/gcc/testsuite/gcc.target/i386/pr95151-3.c
+new file mode 100644
+index 00000000000..14cbdec4c93
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95151-3.c
+@@ -0,0 +1,18 @@
++/* { dg-do compile } */
++/* { dg-options "-O2 -msse2 -mno-inline-all-stringops" } */
++
++struct foo
++{
++  char array[257];
++};
++
++extern struct foo x;
++
++int
++func (struct foo i)
++{
++  return __builtin_memcmp (&x, &i, sizeof (x)) ? 1 : 2;
++}
++
++/* { dg-final { scan-assembler "call\[\\t \]*_?memcmp" } } */
++/* { dg-final { scan-assembler-not "cmpsb" } } */
+diff --git a/gcc/testsuite/gcc.target/i386/pr95151-4.c b/gcc/testsuite/gcc.target/i386/pr95151-4.c
+new file mode 100644
+index 00000000000..c93b2b60c5b
+--- /dev/null
++++ b/gcc/testsuite/gcc.target/i386/pr95151-4.c
+@@ -0,0 +1,11 @@
++/* { dg-do compile } */
++/* { dg-options "-O2 -msse2 -mno-inline-all-stringops" } */
++
++int
++func (void *d, void *s, unsigned int l)
++{
++  return __builtin_memcmp (d, s, l) ? 1 : 2;
++}
++
++/* { dg-final { scan-assembler "call\[\\t \]*_?memcmp" } } */
++/* { dg-final { scan-assembler-not "cmpsb" } } */
+-- 
+2.26.2
+
diff --git a/gcc.spec b/gcc.spec
index c22e2b7..2300742 100644
--- a/gcc.spec
+++ b/gcc.spec
@@ -1,6 +1,9 @@
 Patch100001: 0001-i386-Allow-SI-DI-and-TImode-pushes-from-XMM-register.patch
 Patch100002: 0002-x86-Allow-V1TI-vector-register-pushes.patch
 Patch100003: 0003-Fix-a-typo-in-pushsi2_rex64.patch
+Patch200001: 0001-x86-Pass-a-copy-of-the-string-length-to-cmpstrnqi.patch
+Patch200002: 0002-x86-Replace-__glibc_unlikely-with-__builtin_expect.patch
+Patch200003: 0003-x86-Add-cmpmemsi-for-minline-all-stringops.patch
 
 %global DATE 20201016
 %global gitrev b55a9d01144097312b48281486c03e83cf03fde5
@@ -804,6 +807,9 @@ find gcc/testsuite -name \*.pr96939~ | xargs rm -f
 %patch100001 -p1 -b .pushxmm
 %patch100002 -p1 -b .pushv1ti2
 %patch100003 -p1 -b .pushsi2_rex64
+%patch200001 -p1 -b .pr95443.1
+%patch200002 -p1 -b .pr95443.2
+%patch200003 -p1 -b .pr95151
 
 echo 'Red Hat %{version}-%{gcc_release}' > gcc/DEV-PHASE
 
-- 
2.26.2

