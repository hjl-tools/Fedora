From a5bc6619465a7ba02f0d384c2c3d7f19178d214e Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Sat, 21 Mar 2020 04:05:58 -0700
Subject: [PATCH 2/2] Cherry pick i386: Finish CET support

---
 ...essarily-save-and-restore-EAX-ECX-an.patch |  33 ++++--
 ...-a-missing-_CET_ENDBR-to-indirect-ju.patch |  10 +-
 ...NDBR-to-assembly-files-without-ENTRY.patch | 107 ------------------
 ...d-_CET_ENDBR-to-_mcount-and-__fentry.patch |  36 ++++++
 ...i386-Use-ENTRY-END-in-assembly-codes.patch |  97 ++++++++++++++++
 0005-i386-Remove-_exit.S.patch                |  67 +++++++++++
 ...le-CET-support-in-ucontext-functions.patch |  73 +++++++-----
 glibc.spec                                    |   6 +-
 8 files changed, 277 insertions(+), 152 deletions(-)
 delete mode 100644 0003-i386-Add-_CET_ENDBR-to-assembly-files-without-ENTRY.patch
 create mode 100644 0003-i386-mcount.S-Add-_CET_ENDBR-to-_mcount-and-__fentry.patch
 create mode 100644 0004-i386-Use-ENTRY-END-in-assembly-codes.patch
 create mode 100644 0005-i386-Remove-_exit.S.patch
 rename 0004-i386-Enable-CET-support-in-ucontext-functions.patch => 0006-i386-Enable-CET-support-in-ucontext-functions.patch (90%)

diff --git a/0001-i386-Don-t-unnecessarily-save-and-restore-EAX-ECX-an.patch b/0001-i386-Don-t-unnecessarily-save-and-restore-EAX-ECX-an.patch
index 6735384..9c3dae8 100644
--- a/0001-i386-Don-t-unnecessarily-save-and-restore-EAX-ECX-an.patch
+++ b/0001-i386-Don-t-unnecessarily-save-and-restore-EAX-ECX-an.patch
@@ -1,7 +1,7 @@
-From 5fa25368a73babc36b1a4695a9064cb62363aede Mon Sep 17 00:00:00 2001
+From b1febd2b245f730e7b95a08d4c7d4e7efc627ba0 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
-Date: Mon, 9 Dec 2019 09:26:07 -0800
-Subject: [PATCH 1/4] i386: Don't unnecessarily save and restore EAX, ECX and
+Date: Sat, 1 Feb 2020 05:44:55 -0800
+Subject: [PATCH 1/6] i386: Don't unnecessarily save and restore EAX, ECX and
  EDX [BZ# 25262]
 
 On i386, since EAX, ECX and EDX are caller-saved, there are no need
@@ -10,11 +10,14 @@ swapcontext.  They just need to clear EAX on success.  The extra
 scratch registers are needed to enable CET.
 
 Tested on i386.
+
+Reviewed-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
 ---
- sysdeps/unix/sysv/linux/i386/getcontext.S  |  8 +-------
- sysdeps/unix/sysv/linux/i386/setcontext.S  | 11 ++++-------
- sysdeps/unix/sysv/linux/i386/swapcontext.S | 17 +++++------------
- 3 files changed, 10 insertions(+), 26 deletions(-)
+ sysdeps/unix/sysv/linux/i386/getcontext.S   |  8 +-------
+ sysdeps/unix/sysv/linux/i386/setcontext.S   | 11 ++++-------
+ sysdeps/unix/sysv/linux/i386/swapcontext.S  | 17 +++++------------
+ sysdeps/unix/sysv/linux/i386/ucontext_i.sym |  3 ---
+ 4 files changed, 10 insertions(+), 29 deletions(-)
 
 diff --git a/sysdeps/unix/sysv/linux/i386/getcontext.S b/sysdeps/unix/sysv/linux/i386/getcontext.S
 index ff35cc6821..f4c7185594 100644
@@ -105,6 +108,20 @@ index 7163a89903..16d9a1cac5 100644
  
  	/* The following 'ret' will pop the address of the code and jump
  	   to it.  */
+diff --git a/sysdeps/unix/sysv/linux/i386/ucontext_i.sym b/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
+index b11a5509cd..1dfe03d2cc 100644
+--- a/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
++++ b/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
+@@ -21,9 +21,6 @@ oESI		mreg (ESI)
+ oEBP		mreg (EBP)
+ oESP		mreg (ESP)
+ oEBX		mreg (EBX)
+-oEDX		mreg (EDX)
+-oECX		mreg (ECX)
+-oEAX		mreg (EAX)
+ oEIP		mreg (EIP)
+ oFPREGS		mcontext (fpregs)
+ oSIGMASK	ucontext (uc_sigmask)
 -- 
-2.21.0
+2.25.1
 
diff --git a/0002-i386-sub_n.S-Add-a-missing-_CET_ENDBR-to-indirect-ju.patch b/0002-i386-sub_n.S-Add-a-missing-_CET_ENDBR-to-indirect-ju.patch
index d42f92f..87d126c 100644
--- a/0002-i386-sub_n.S-Add-a-missing-_CET_ENDBR-to-indirect-ju.patch
+++ b/0002-i386-sub_n.S-Add-a-missing-_CET_ENDBR-to-indirect-ju.patch
@@ -1,10 +1,12 @@
-From 31fd0563493b98fe5596855c6358fb384ca1294e Mon Sep 17 00:00:00 2001
+From 6d93252d4bc0b9574e34bc69f66cfefe7b2d06e3 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
-Date: Fri, 6 Dec 2019 10:38:49 -0800
-Subject: [PATCH 2/4] i386/sub_n.S: Add a missing _CET_ENDBR to indirect jump
+Date: Sat, 1 Feb 2020 05:44:55 -0800
+Subject: [PATCH 2/6] i386/sub_n.S: Add a missing _CET_ENDBR to indirect jump
  target
 
 Add a missing _CET_ENDBR to indirect jump targe in sysdeps/i386/sub_n.S.
+
+Reviewed-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
 ---
  sysdeps/i386/sub_n.S | 1 +
  1 file changed, 1 insertion(+)
@@ -22,5 +24,5 @@ index 43e70a2b54..70192fb2d9 100644
  	sbbl	12(%edx),%eax
  	movl	%eax,12(%edi)
 -- 
-2.21.0
+2.25.1
 
diff --git a/0003-i386-Add-_CET_ENDBR-to-assembly-files-without-ENTRY.patch b/0003-i386-Add-_CET_ENDBR-to-assembly-files-without-ENTRY.patch
deleted file mode 100644
index e0f4103..0000000
--- a/0003-i386-Add-_CET_ENDBR-to-assembly-files-without-ENTRY.patch
+++ /dev/null
@@ -1,107 +0,0 @@
-From 23d7df2d5aa7a8c382fcefdd0d30b24fa533ef4d Mon Sep 17 00:00:00 2001
-From: "H.J. Lu" <hjl.tools@gmail.com>
-Date: Fri, 6 Dec 2019 10:42:30 -0800
-Subject: [PATCH 3/4] i386: Add _CET_ENDBR to assembly files without ENTRY
-
-Add _CET_ENDBR to i386 assembly files which don't use ENTRY to add
-ENDBR32 at function entries when CET is enabled.
----
- sysdeps/i386/i386-mcount.S              | 2 ++
- sysdeps/i386/nptl/pthread_spin_lock.S   | 2 ++
- sysdeps/i386/nptl/pthread_spin_unlock.S | 3 +++
- sysdeps/i386/pthread_spin_trylock.S     | 2 ++
- sysdeps/unix/sysv/linux/i386/_exit.S    | 1 +
- 5 files changed, 10 insertions(+)
-
-diff --git a/sysdeps/i386/i386-mcount.S b/sysdeps/i386/i386-mcount.S
-index 4c0b67cb7d..2eedba3356 100644
---- a/sysdeps/i386/i386-mcount.S
-+++ b/sysdeps/i386/i386-mcount.S
-@@ -30,6 +30,7 @@
- 	.type C_SYMBOL_NAME(_mcount), @function
- 	.align ALIGNARG(4)
- C_LABEL(_mcount)
-+	_CET_ENDBR
- 	/* Save the caller-clobbered registers.  */
- 	pushl %eax
- 	pushl %ecx
-@@ -58,6 +59,7 @@ weak_alias (_mcount, mcount)
- 	.type C_SYMBOL_NAME(__fentry__), @function
- 	.align ALIGNARG(4)
- C_LABEL(__fentry__)
-+	_CET_ENDBR
- 	/* Save the caller-clobbered registers.  */
- 	pushl %eax
- 	pushl %ecx
-diff --git a/sysdeps/i386/nptl/pthread_spin_lock.S b/sysdeps/i386/nptl/pthread_spin_lock.S
-index 4bcf289cf0..5f6e702269 100644
---- a/sysdeps/i386/nptl/pthread_spin_lock.S
-+++ b/sysdeps/i386/nptl/pthread_spin_lock.S
-@@ -15,12 +15,14 @@
-    License along with the GNU C Library; if not, see
-    <http://www.gnu.org/licenses/>.  */
- 
-+#include <sysdep.h>
- #include <lowlevellock.h>
- 
- 	.globl	pthread_spin_lock
- 	.type	pthread_spin_lock,@function
- 	.align	16
- pthread_spin_lock:
-+	_CET_ENDBR
- 	mov	4(%esp), %eax
- 1:	LOCK
- 	decl	0(%eax)
-diff --git a/sysdeps/i386/nptl/pthread_spin_unlock.S b/sysdeps/i386/nptl/pthread_spin_unlock.S
-index d7883c1af2..d76870a305 100644
---- a/sysdeps/i386/nptl/pthread_spin_unlock.S
-+++ b/sysdeps/i386/nptl/pthread_spin_unlock.S
-@@ -16,10 +16,13 @@
-    License along with the GNU C Library; if not, see
-    <http://www.gnu.org/licenses/>.  */
- 
-+#include <sysdep.h>
-+
- 	.globl	pthread_spin_unlock
- 	.type	pthread_spin_unlock,@function
- 	.align	16
- pthread_spin_unlock:
-+	_CET_ENDBR
- 	movl	4(%esp), %eax
- 	movl	$1, (%eax)
- 	xorl	%eax, %eax
-diff --git a/sysdeps/i386/pthread_spin_trylock.S b/sysdeps/i386/pthread_spin_trylock.S
-index 4ab28640f0..c8c486a473 100644
---- a/sysdeps/i386/pthread_spin_trylock.S
-+++ b/sysdeps/i386/pthread_spin_trylock.S
-@@ -16,6 +16,7 @@
-    License along with the GNU C Library; if not, see
-    <http://www.gnu.org/licenses/>.  */
- 
-+#include <sysdep.h>
- #include <pthread-errnos.h>
- 
- 
-@@ -29,6 +30,7 @@
- 	.type	pthread_spin_trylock,@function
- 	.align	16
- pthread_spin_trylock:
-+	_CET_ENDBR
- 	movl	4(%esp), %edx
- 	movl	$1, %eax
- 	xorl	%ecx, %ecx
-diff --git a/sysdeps/unix/sysv/linux/i386/_exit.S b/sysdeps/unix/sysv/linux/i386/_exit.S
-index 4fc675ef17..30d5e76ade 100644
---- a/sysdeps/unix/sysv/linux/i386/_exit.S
-+++ b/sysdeps/unix/sysv/linux/i386/_exit.S
-@@ -21,6 +21,7 @@
- 	.type	_exit,@function
- 	.global	_exit
- _exit:
-+	_CET_ENDBR
- 	movl	4(%esp), %ebx
- 
- 	/* Try the new syscall first.  */
--- 
-2.21.0
-
diff --git a/0003-i386-mcount.S-Add-_CET_ENDBR-to-_mcount-and-__fentry.patch b/0003-i386-mcount.S-Add-_CET_ENDBR-to-_mcount-and-__fentry.patch
new file mode 100644
index 0000000..f7f6f26
--- /dev/null
+++ b/0003-i386-mcount.S-Add-_CET_ENDBR-to-_mcount-and-__fentry.patch
@@ -0,0 +1,36 @@
+From 994ae3679dbe66d70e20c367b1db449cf8a98762 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Sat, 1 Feb 2020 05:44:55 -0800
+Subject: [PATCH 3/6] i386-mcount.S: Add _CET_ENDBR to _mcount and __fentry__
+
+Since _mcount and __fentry__ don't use ENTRY, we need to add _CET_ENDBR
+by hand.
+
+Reviewed-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
+---
+ sysdeps/i386/i386-mcount.S | 2 ++
+ 1 file changed, 2 insertions(+)
+
+diff --git a/sysdeps/i386/i386-mcount.S b/sysdeps/i386/i386-mcount.S
+index 4c0b67cb7d..2eedba3356 100644
+--- a/sysdeps/i386/i386-mcount.S
++++ b/sysdeps/i386/i386-mcount.S
+@@ -30,6 +30,7 @@
+ 	.type C_SYMBOL_NAME(_mcount), @function
+ 	.align ALIGNARG(4)
+ C_LABEL(_mcount)
++	_CET_ENDBR
+ 	/* Save the caller-clobbered registers.  */
+ 	pushl %eax
+ 	pushl %ecx
+@@ -58,6 +59,7 @@ weak_alias (_mcount, mcount)
+ 	.type C_SYMBOL_NAME(__fentry__), @function
+ 	.align ALIGNARG(4)
+ C_LABEL(__fentry__)
++	_CET_ENDBR
+ 	/* Save the caller-clobbered registers.  */
+ 	pushl %eax
+ 	pushl %ecx
+-- 
+2.25.1
+
diff --git a/0004-i386-Use-ENTRY-END-in-assembly-codes.patch b/0004-i386-Use-ENTRY-END-in-assembly-codes.patch
new file mode 100644
index 0000000..9b188d8
--- /dev/null
+++ b/0004-i386-Use-ENTRY-END-in-assembly-codes.patch
@@ -0,0 +1,97 @@
+From bb1fd62f9e8074850fba892b9c8c89e1f6979af9 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Sat, 1 Feb 2020 05:44:55 -0800
+Subject: [PATCH 4/6] i386: Use ENTRY/END in assembly codes
+
+Use ENTRY and END in assembly codes so that ENDBR32 will be added at
+function entries when CET is enabled.
+
+Reviewed-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
+---
+ sysdeps/i386/nptl/pthread_spin_lock.S   | 8 +++-----
+ sysdeps/i386/nptl/pthread_spin_unlock.S | 9 ++++-----
+ sysdeps/i386/pthread_spin_trylock.S     | 8 +++-----
+ 3 files changed, 10 insertions(+), 15 deletions(-)
+
+diff --git a/sysdeps/i386/nptl/pthread_spin_lock.S b/sysdeps/i386/nptl/pthread_spin_lock.S
+index 4bcf289cf0..c08b55dd43 100644
+--- a/sysdeps/i386/nptl/pthread_spin_lock.S
++++ b/sysdeps/i386/nptl/pthread_spin_lock.S
+@@ -15,12 +15,10 @@
+    License along with the GNU C Library; if not, see
+    <http://www.gnu.org/licenses/>.  */
+ 
++#include <sysdep.h>
+ #include <lowlevellock.h>
+ 
+-	.globl	pthread_spin_lock
+-	.type	pthread_spin_lock,@function
+-	.align	16
+-pthread_spin_lock:
++ENTRY (pthread_spin_lock)
+ 	mov	4(%esp), %eax
+ 1:	LOCK
+ 	decl	0(%eax)
+@@ -34,4 +32,4 @@ pthread_spin_lock:
+ 	cmpl	$0, 0(%eax)
+ 	jg	1b
+ 	jmp	2b
+-	.size	pthread_spin_lock,.-pthread_spin_lock
++END (pthread_spin_lock)
+diff --git a/sysdeps/i386/nptl/pthread_spin_unlock.S b/sysdeps/i386/nptl/pthread_spin_unlock.S
+index d7883c1af2..2f238cc7b1 100644
+--- a/sysdeps/i386/nptl/pthread_spin_unlock.S
++++ b/sysdeps/i386/nptl/pthread_spin_unlock.S
+@@ -16,15 +16,14 @@
+    License along with the GNU C Library; if not, see
+    <http://www.gnu.org/licenses/>.  */
+ 
+-	.globl	pthread_spin_unlock
+-	.type	pthread_spin_unlock,@function
+-	.align	16
+-pthread_spin_unlock:
++#include <sysdep.h>
++
++ENTRY (pthread_spin_unlock)
+ 	movl	4(%esp), %eax
+ 	movl	$1, (%eax)
+ 	xorl	%eax, %eax
+ 	ret
+-	.size	pthread_spin_unlock,.-pthread_spin_unlock
++END (pthread_spin_unlock)
+ 
+ 	/* The implementation of pthread_spin_init is identical.  */
+ 	.globl	pthread_spin_init
+diff --git a/sysdeps/i386/pthread_spin_trylock.S b/sysdeps/i386/pthread_spin_trylock.S
+index 4ab28640f0..a8c1b35379 100644
+--- a/sysdeps/i386/pthread_spin_trylock.S
++++ b/sysdeps/i386/pthread_spin_trylock.S
+@@ -16,6 +16,7 @@
+    License along with the GNU C Library; if not, see
+    <http://www.gnu.org/licenses/>.  */
+ 
++#include <sysdep.h>
+ #include <pthread-errnos.h>
+ 
+ 
+@@ -25,10 +26,7 @@
+ # define LOCK lock
+ #endif
+ 
+-	.globl	pthread_spin_trylock
+-	.type	pthread_spin_trylock,@function
+-	.align	16
+-pthread_spin_trylock:
++ENTRY (pthread_spin_trylock)
+ 	movl	4(%esp), %edx
+ 	movl	$1, %eax
+ 	xorl	%ecx, %ecx
+@@ -43,4 +41,4 @@ pthread_spin_trylock:
+ 0:
+ #endif
+ 	ret
+-	.size	pthread_spin_trylock,.-pthread_spin_trylock
++END (pthread_spin_trylock)
+-- 
+2.25.1
+
diff --git a/0005-i386-Remove-_exit.S.patch b/0005-i386-Remove-_exit.S.patch
new file mode 100644
index 0000000..424f37a
--- /dev/null
+++ b/0005-i386-Remove-_exit.S.patch
@@ -0,0 +1,67 @@
+From 546ec4ae5f8456c283b18dd6718fd53d89961ed8 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Sat, 1 Feb 2020 05:44:56 -0800
+Subject: [PATCH 5/6] i386: Remove _exit.S
+
+The generic implementation is suffice since __NR_exit_group is always
+support and i386 does define ABORT_INSTRUCTION.
+
+Reviewed-by: Adhemerval Zanella <adhemerval.zanella@linaro.org>
+---
+ sysdeps/unix/sysv/linux/i386/_exit.S | 44 ----------------------------
+ 1 file changed, 44 deletions(-)
+ delete mode 100644 sysdeps/unix/sysv/linux/i386/_exit.S
+
+diff --git a/sysdeps/unix/sysv/linux/i386/_exit.S b/sysdeps/unix/sysv/linux/i386/_exit.S
+deleted file mode 100644
+index 4fc675ef17..0000000000
+--- a/sysdeps/unix/sysv/linux/i386/_exit.S
++++ /dev/null
+@@ -1,44 +0,0 @@
+-/* Copyright (C) 2002-2019 Free Software Foundation, Inc.
+-   This file is part of the GNU C Library.
+-
+-   The GNU C Library is free software; you can redistribute it and/or
+-   modify it under the terms of the GNU Lesser General Public
+-   License as published by the Free Software Foundation; either
+-   version 2.1 of the License, or (at your option) any later version.
+-
+-   The GNU C Library is distributed in the hope that it will be useful,
+-   but WITHOUT ANY WARRANTY; without even the implied warranty of
+-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+-   Lesser General Public License for more details.
+-
+-   You should have received a copy of the GNU Lesser General Public
+-   License along with the GNU C Library; if not, see
+-   <http://www.gnu.org/licenses/>.  */
+-
+-#include <sysdep.h>
+-
+-	.text
+-	.type	_exit,@function
+-	.global	_exit
+-_exit:
+-	movl	4(%esp), %ebx
+-
+-	/* Try the new syscall first.  */
+-#ifdef __NR_exit_group
+-	movl	$__NR_exit_group, %eax
+-	ENTER_KERNEL
+-#endif
+-
+-	/* Not available.  Now the old one.  */
+-	movl	$__NR_exit, %eax
+-	/* Don't bother using ENTER_KERNEL here.  If the exit_group
+-	   syscall is not available AT_SYSINFO isn't either.  */
+-	int	$0x80
+-
+-	/* This must not fail.  Be sure we don't return.  */
+-	hlt
+-	.size	_exit,.-_exit
+-
+-libc_hidden_def (_exit)
+-rtld_hidden_def (_exit)
+-weak_alias (_exit, _Exit)
+-- 
+2.25.1
+
diff --git a/0004-i386-Enable-CET-support-in-ucontext-functions.patch b/0006-i386-Enable-CET-support-in-ucontext-functions.patch
similarity index 90%
rename from 0004-i386-Enable-CET-support-in-ucontext-functions.patch
rename to 0006-i386-Enable-CET-support-in-ucontext-functions.patch
index 9a3dbf4..79499df 100644
--- a/0004-i386-Enable-CET-support-in-ucontext-functions.patch
+++ b/0006-i386-Enable-CET-support-in-ucontext-functions.patch
@@ -1,7 +1,7 @@
-From cb3c9004ec3ac265d51e3dcefd2f9bb73fa8b6a0 Mon Sep 17 00:00:00 2001
+From 707a55c5d53287ad54518739443ab942be6cf823 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
-Date: Fri, 6 Dec 2019 16:45:17 -0800
-Subject: [PATCH 4/4] i386: Enable CET support in ucontext functions
+Date: Fri, 14 Feb 2020 14:45:34 -0800
+Subject: [PATCH 6/6] i386: Enable CET support in ucontext functions
 
 1. getcontext and swapcontext are updated to save the caller's shadow
 stack pointer and return address.
@@ -9,6 +9,9 @@ stack pointer and return address.
 jump to new context directly.
 3. makecontext is updated to allocate a new shadow stack and set the
 caller's return address to the helper code, L(exitcode).
+4. Since we no longer save and restore EAX, ECX and EDX in getcontext,
+setcontext and swapcontext, we can use them as scratch register slots
+to enable CET in ucontext functions.
 
 Since makecontext allocates a new shadow stack when making a new
 context and kernel allocates a new shadow stack for clone/fork/vfork
@@ -27,17 +30,19 @@ run-time.  We check if shadow stack is enabled before accessing the
 extended field in ucontext_t.
 
 Tested on i386 CET/non-CET machines.
+
+Reviewed-by: Carlos O'Donell <carlos@redhat.com>
 ---
  sysdeps/unix/sysv/linux/i386/getcontext.S   |  56 ++++++++
  sysdeps/unix/sysv/linux/i386/makecontext.S  | 123 +++++++++++++++++
  sysdeps/unix/sysv/linux/i386/setcontext.S   | 101 +++++++++++++-
  sysdeps/unix/sysv/linux/i386/swapcontext.S  | 139 ++++++++++++++++++++
  sysdeps/unix/sysv/linux/i386/sysdep.h       |   5 +
- sysdeps/unix/sysv/linux/i386/ucontext_i.sym |   1 +
- 6 files changed, 422 insertions(+), 3 deletions(-)
+ sysdeps/unix/sysv/linux/i386/ucontext_i.sym |   4 +
+ 6 files changed, 425 insertions(+), 3 deletions(-)
 
 diff --git a/sysdeps/unix/sysv/linux/i386/getcontext.S b/sysdeps/unix/sysv/linux/i386/getcontext.S
-index f4c7185594..0dfb42d87b 100644
+index f4c7185594..2ecbfc71c8 100644
 --- a/sysdeps/unix/sysv/linux/i386/getcontext.S
 +++ b/sysdeps/unix/sysv/linux/i386/getcontext.S
 @@ -18,6 +18,7 @@
@@ -64,8 +69,8 @@ index f4c7185594..0dfb42d87b 100644
 +	cmpl	%gs:SSP_BASE_OFFSET, %eax
 +	jnz	L(shadow_stack_bound_recorded)
 +
-+	/* Save EBX in the unused EAX slot.  */
-+	movl	%ebx, oEAX(%edx)
++	/* Save EBX in the first scratch register slot.  */
++	movl	%ebx, oSCRATCH1(%edx)
 +
 +	/* Get the base address and size of the default shadow stack
 +	   which must be the current shadow stack since nothing has
@@ -82,8 +87,8 @@ index f4c7185594..0dfb42d87b 100644
 +	hlt
 +
 +L(continue_no_err):
-+	/* Restore EBX from the EAX slot.  */
-+	movl	oEAX(%edx), %ebx
++	/* Restore EBX from the first scratch register slot.  */
++	movl	oSCRATCH1(%edx), %ebx
 +
 +	/* Record the base of the current shadow stack.  */
 +	movl	8(%esp), %eax
@@ -111,7 +116,7 @@ index f4c7185594..0dfb42d87b 100644
  	   stack.  We use the __fpregs_mem block in the context.  Set the
  	   links up correctly.  */
 diff --git a/sysdeps/unix/sysv/linux/i386/makecontext.S b/sysdeps/unix/sysv/linux/i386/makecontext.S
-index 4463c77a08..cdeb7dd797 100644
+index 4463c77a08..8c5994a83d 100644
 --- a/sysdeps/unix/sysv/linux/i386/makecontext.S
 +++ b/sysdeps/unix/sysv/linux/i386/makecontext.S
 @@ -18,6 +18,7 @@
@@ -146,10 +151,10 @@ index 4463c77a08..cdeb7dd797 100644
 +	/* Store shadow stack size in __ssp[2].  */
 +	movl	%edx, (oSSP + 8)(%eax)
 +
-+	/* Save ESI in the unused ECX slot.  */
-+	movl	%esi, oECX(%eax)
-+	/* Save EDI in the unused EDX slot.  */
-+	movl	%edi, oEDX(%eax)
++	/* Save ESI in the second scratch register slot.  */
++	movl	%esi, oSCRATCH2(%eax)
++	/* Save EDI in the third scratch register slot.  */
++	movl	%edi, oSCRATCH3(%eax)
 +
 +	/* Save the pointer to ucontext.  */
 +	movl	%eax, %edi
@@ -176,9 +181,9 @@ index 4463c77a08..cdeb7dd797 100644
 +	   onto stack.  */
 +	addl	$4, %esp
 +
-+	/* Allocate the new shadow stack.  Save EBX in the unused EAX
-+	   slot.  */
-+	movl	%ebx, oEAX(%eax)
++	/* Allocate the new shadow stack.  Save EBX in the first scratch
++	   register slot.  */
++	movl	%ebx, oSCRATCH1(%eax)
 +
 +	/* CET syscall takes 64-bit sizes.  */
 +	subl	$16, %esp
@@ -201,8 +206,8 @@ index 4463c77a08..cdeb7dd797 100644
 +
 +	addl	$16, %esp
 +
-+	/* Restore EBX from the EAX slot.  */
-+	movl	oEAX(%edi), %ebx
++	/* Restore EBX from the first scratch register slot.  */
++	movl	oSCRATCH1(%edi), %ebx
 +
 +	/* Get the size of the new shadow stack.  */
 +	movl	(oSSP + 8)(%edi), %ecx
@@ -237,10 +242,10 @@ index 4463c77a08..cdeb7dd797 100644
 +
 +	cfi_startproc
 +
-+	/* Restore ESI from the ECX slot.  */
-+	movl	oECX(%edi), %esi
-+	/* Restore EDI from the EDX slot.  */
-+	movl	oEDX(%edi), %edi
++	/* Restore ESI from the second scratch register slot.  */
++	movl	oSCRATCH2(%edi), %esi
++	/* Restore EDI from the third scratch register slot.  */
++	movl	oSCRATCH3(%edi), %edi
 +
 +	ret
 +
@@ -259,7 +264,7 @@ index 4463c77a08..cdeb7dd797 100644
  	cfi_startproc
  END(__makecontext)
 diff --git a/sysdeps/unix/sysv/linux/i386/setcontext.S b/sysdeps/unix/sysv/linux/i386/setcontext.S
-index 9c5273d216..8a027e9401 100644
+index 9c5273d216..2dd7f8a81f 100644
 --- a/sysdeps/unix/sysv/linux/i386/setcontext.S
 +++ b/sysdeps/unix/sysv/linux/i386/setcontext.S
 @@ -18,6 +18,7 @@
@@ -301,11 +306,11 @@ index 9c5273d216..8a027e9401 100644
 +	cmpl	%gs:SSP_BASE_OFFSET, %ecx
 +	je	L(unwind_shadow_stack)
 +
-+L(find_restore_token_loop):
 +	/* Align the saved original shadow stack pointer to the next
 +	   8 byte aligned boundary.  */
 +	andl	$-8, %esi
 +
++L(find_restore_token_loop):
 +	/* Look for a restore token.  */
 +	movl	-8(%esi), %ebx
 +	andl	$-8, %ebx
@@ -385,7 +390,7 @@ index 9c5273d216..8a027e9401 100644
  	pushl	%ecx
  
 diff --git a/sysdeps/unix/sysv/linux/i386/swapcontext.S b/sysdeps/unix/sysv/linux/i386/swapcontext.S
-index 16d9a1cac5..79ff296442 100644
+index 16d9a1cac5..b4aafef261 100644
 --- a/sysdeps/unix/sysv/linux/i386/swapcontext.S
 +++ b/sysdeps/unix/sysv/linux/i386/swapcontext.S
 @@ -18,6 +18,7 @@
@@ -458,11 +463,11 @@ index 16d9a1cac5..79ff296442 100644
 +	cmpl	%gs:SSP_BASE_OFFSET, %ecx
 +	je	L(unwind_shadow_stack)
 +
-+L(find_restore_token_loop):
 +	/* Align the saved original shadow stack pointer to the next
 +	   8 byte aligned boundary.  */
 +	andl	$-8, %esi
 +
++L(find_restore_token_loop):
 +	/* Look for a restore token.  */
 +	movl	-8(%esi), %ebx
 +	andl	$-8, %ebx
@@ -556,14 +561,20 @@ index 0be10744ff..9241c26a58 100644
 +
  #endif /* linux/i386/sysdep.h */
 diff --git a/sysdeps/unix/sysv/linux/i386/ucontext_i.sym b/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
-index b11a5509cd..933c1924eb 100644
+index 1dfe03d2cc..1d8608eafc 100644
 --- a/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
 +++ b/sysdeps/unix/sysv/linux/i386/ucontext_i.sym
-@@ -28,3 +28,4 @@ oEIP		mreg (EIP)
+@@ -22,6 +22,10 @@ oEBP		mreg (EBP)
+ oESP		mreg (ESP)
+ oEBX		mreg (EBX)
+ oEIP		mreg (EIP)
++oSCRATCH1	mreg (EAX)
++oSCRATCH2	mreg (ECX)
++oSCRATCH3	mreg (EDX)
  oFPREGS		mcontext (fpregs)
  oSIGMASK	ucontext (uc_sigmask)
  oFPREGSMEM	ucontext (__fpregs_mem)
 +oSSP		ucontext (__ssp)
 -- 
-2.21.0
+2.25.1
 
diff --git a/glibc.spec b/glibc.spec
index fc36f8c..30d6a4f 100644
--- a/glibc.spec
+++ b/glibc.spec
@@ -1,8 +1,10 @@
 Patch100001: 0001-x86-Remove-ARCH_CET_LEGACY_BITMAP-BZ-25397.patch
 Patch200001: 0001-i386-Don-t-unnecessarily-save-and-restore-EAX-ECX-an.patch
 Patch200002: 0002-i386-sub_n.S-Add-a-missing-_CET_ENDBR-to-indirect-ju.patch
-Patch200003: 0003-i386-Add-_CET_ENDBR-to-assembly-files-without-ENTRY.patch
-Patch200004: 0004-i386-Enable-CET-support-in-ucontext-functions.patch
+Patch200003: 0003-i386-mcount.S-Add-_CET_ENDBR-to-_mcount-and-__fentry.patch
+Patch200004: 0004-i386-Use-ENTRY-END-in-assembly-codes.patch
+Patch200005: 0005-i386-Remove-_exit.S.patch
+Patch200006: 0006-i386-Enable-CET-support-in-ucontext-functions.patch
 
 %define glibcsrcdir glibc-2.30-34-g994e529a37
 %define glibcversion 2.30
-- 
2.25.1

