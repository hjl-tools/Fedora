From 5ea14da1d2d1bfafcb247adcc29150f02c498376 Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Mon, 20 Apr 2020 16:03:10 -0700
Subject: [PATCH 2/2] Update Intel CET patches for Linux kernel 5.7-rc2

---
 ...ename-validate_xstate_header-to-vali.patch |   4 +-
 ...efine-new-macros-for-supervisor-and-.patch |   4 +-
 ...eparate-user-and-supervisor-xfeature.patch |   4 +-
 ...e-Introduce-XSAVES-supervisor-states.patch |   4 +-
 ...efine-new-functions-for-clearing-fpr.patch |   4 +-
 ...pdate-sanitize_restored_xstate-for-s.patch |   4 +-
 ...pdate-copy_kernel_to_xregs_err-for-X.patch |   4 +-
 ...-Introduce-copy_supervisor_to_kernel.patch |   4 +-
 ...reserve-supervisor-states-for-slow-p.patch |   4 +-
 ...estore-supervisor-states-for-signal-.patch |   4 +-
 ...ocumentation-x86-Add-CET-description.patch |  47 +++---
 ...Add-CET-CPU-feature-flags-for-Contro.patch |   4 +-
 ...ntroduce-CET-MSR-XSAVES-supervisor-s.patch |   4 +-
 ...Add-control-protection-fault-handler.patch |   4 +-
 ...d-Kconfig-option-for-user-mode-Shado.patch |  41 ++---
 ...Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch |   4 +-
 ...-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch |  16 +-
 ...h => 0018-x86-mm-Introduce-_PAGE_COW.patch |  13 +-
 ...ange-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch |   4 +-
 ...e_modify-and-pmd_modify-for-_PAGE_CO.patch |   8 +-
 ...ep_set_wrprotect-and-pmdp_set_wrprot.patch |   6 +-
 ...uce-VM_SHSTK-for-Shadow-Stack-memory.patch |   9 +-
 ...adow-Stack-page-fault-error-checking.patch |   8 +-
 0024-x86-mm-Introduce-arch_cow_mapping.patch  |  69 ---------
 ..._cow_mapping-and-maybe_mkwrite-for-s.patch | 143 ++++++++++++++++++
 ...e-do_anonymous_page-and-do_numa_page.patch |  56 +++++++
 ...date-maybe_mkwrite-maybe_pmd_mkwrite.patch |  39 -----
 ...an_follow_write_pte-for-Shadow-Stack.patch |   8 +-
 0027-mm-Fix-do_anonymous_page.patch           |  26 ----
 ...dd-guard-pages-around-a-Shadow-Stack.patch |  12 +-
 ...dow-Stack-pages-to-memory-accounting.patch |  83 ++++++++++
 ...shstk-User-mode-Shadow-Stack-support.patch |  34 +++--
 ...hstk-Handle-signals-for-Shadow-Stack.patch |   8 +-
 ...nfig-additions-for-ELF-program-prope.patch |   4 +-
 ...ELF-program-property-parsing-support.patch |   4 +-
 ...LF-Introduce-arch_setup_elf_property.patch |   4 +-
 ...-ELF-header-parsing-for-Shadow-Stack.patch |  14 +-
 ...cet-shstk-Handle-thread-Shadow-Stack.patch |   6 +-
 ...dow-Stack-pages-to-memory-accounting.patch |  41 -----
 ...d-arch_prctl-functions-for-Shadow-St.patch |  28 ++--
 ...Kconfig-option-for-user-mode-Indirec.patch |  10 +-
 ...-mode-Indirect-Branch-Tracking-suppo.patch |   8 +-
 ...le-signals-for-Indirect-Branch-Track.patch |  10 +-
 ...header-parsing-for-Indirect-Branch-T.patch |  10 +-
 ...arch_prctl-functions-for-Indirect-Br.patch |  22 ++-
 ...x86-cet-Add-PTRACE-interface-for-CET.patch |   4 +-
 ...u.property-sections-in-generic-NOTES.patch |   4 +-
 ...ENDBR32-to-__kernel_vsyscall-entry-p.patch |   4 +-
 ...-vdso-Insert-endbr32-endbr64-to-vDSO.patch |   4 +-
 ...yscall-emulation-when-CET-is-enabled.patch |  10 +-
 kernel.spec                                   |  98 ++++++------
 51 files changed, 561 insertions(+), 410 deletions(-)
 rename 0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch => 0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch (98%)
 rename 0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch => 0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch (76%)
 rename 0020-x86-mm-Introduce-_PAGE_COW.patch => 0018-x86-mm-Introduce-_PAGE_COW.patch (97%)
 rename 0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch => 0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch (89%)
 rename 0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch => 0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch (90%)
 rename 0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch => 0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch (96%)
 rename 0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch => 0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch (91%)
 rename 0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch => 0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch (93%)
 delete mode 100644 0024-x86-mm-Introduce-arch_cow_mapping.patch
 create mode 100644 0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch
 create mode 100644 0025-mm-Update-do_anonymous_page-and-do_numa_page.patch
 delete mode 100644 0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch
 rename 0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch => 0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch (92%)
 delete mode 100644 0027-mm-Fix-do_anonymous_page.patch
 rename 0017-Add-guard-pages-around-a-Shadow-Stack.patch => 0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch (89%)
 create mode 100644 0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
 delete mode 100644 0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
 rename 0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch => 0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch (91%)
 rename 0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch => 0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch (85%)
 rename 0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch => 0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch (95%)
 rename 0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch => 0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch (90%)
 rename 0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch => 0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch (84%)
 rename 0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch => 0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch (59%)
 rename 0043-x86-cet-Add-PTRACE-interface-for-CET.patch => 0042-x86-cet-Add-PTRACE-interface-for-CET.patch (97%)
 rename 0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch => 0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch (94%)
 rename 0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch => 0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch (86%)
 rename 0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch => 0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch (89%)
 rename 0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch => 0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch (87%)

diff --git a/0001-x86-fpu-xstate-Rename-validate_xstate_header-to-vali.patch b/0001-x86-fpu-xstate-Rename-validate_xstate_header-to-vali.patch
index b80565c92..4534eee75 100644
--- a/0001-x86-fpu-xstate-Rename-validate_xstate_header-to-vali.patch
+++ b/0001-x86-fpu-xstate-Rename-validate_xstate_header-to-vali.patch
@@ -1,7 +1,7 @@
-From 86a4424ff9f8f9d4b5ecf033839460642814bbcd Mon Sep 17 00:00:00 2001
+From ab7af4a002ee4f899d496dbe58b600e9a724824b Mon Sep 17 00:00:00 2001
 From: Fenghua Yu <fenghua.yu@intel.com>
 Date: Wed, 13 Dec 2017 16:08:28 -0800
-Subject: [PATCH 01/47] x86/fpu/xstate: Rename validate_xstate_header() to
+Subject: [PATCH 01/46] x86/fpu/xstate: Rename validate_xstate_header() to
  validate_user_xstate_header()
 
 The function validate_xstate_header() validates an xstate header coming
diff --git a/0002-x86-fpu-xstate-Define-new-macros-for-supervisor-and-.patch b/0002-x86-fpu-xstate-Define-new-macros-for-supervisor-and-.patch
index 9e4ffd4a6..df6dd02ac 100644
--- a/0002-x86-fpu-xstate-Define-new-macros-for-supervisor-and-.patch
+++ b/0002-x86-fpu-xstate-Define-new-macros-for-supervisor-and-.patch
@@ -1,7 +1,7 @@
-From f98eb5856eb8b861e0bcd374ffcfb6a9b51cd086 Mon Sep 17 00:00:00 2001
+From b9c24982c4d0015a8326d51a4480ff1800343b59 Mon Sep 17 00:00:00 2001
 From: Fenghua Yu <fenghua.yu@intel.com>
 Date: Thu, 10 Nov 2016 10:13:56 -0800
-Subject: [PATCH 02/47] x86/fpu/xstate: Define new macros for supervisor and
+Subject: [PATCH 02/46] x86/fpu/xstate: Define new macros for supervisor and
  user xstates
 
 XCNTXT_MASK is 'all supported xfeatures' before introducing supervisor
diff --git a/0003-x86-fpu-xstate-Separate-user-and-supervisor-xfeature.patch b/0003-x86-fpu-xstate-Separate-user-and-supervisor-xfeature.patch
index ac2ff3c0f..db2919bd4 100644
--- a/0003-x86-fpu-xstate-Separate-user-and-supervisor-xfeature.patch
+++ b/0003-x86-fpu-xstate-Separate-user-and-supervisor-xfeature.patch
@@ -1,7 +1,7 @@
-From abcf3dd00078de6638ef5dd66b1213144a2bc6f9 Mon Sep 17 00:00:00 2001
+From 598097e6a0656f9bdddc983dcd4c89e6c1180c80 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Wed, 13 Dec 2017 16:08:28 -0800
-Subject: [PATCH 03/47] x86/fpu/xstate: Separate user and supervisor xfeatures
+Subject: [PATCH 03/46] x86/fpu/xstate: Separate user and supervisor xfeatures
  mask
 
 Before the introduction of XSAVES supervisor states, 'xfeatures_mask' is
diff --git a/0004-x86-fpu-xstate-Introduce-XSAVES-supervisor-states.patch b/0004-x86-fpu-xstate-Introduce-XSAVES-supervisor-states.patch
index c7b7024f1..0c9fa650f 100644
--- a/0004-x86-fpu-xstate-Introduce-XSAVES-supervisor-states.patch
+++ b/0004-x86-fpu-xstate-Introduce-XSAVES-supervisor-states.patch
@@ -1,7 +1,7 @@
-From d6cd14c3a0df031cae2fc2ae53dfae1d647bcfc9 Mon Sep 17 00:00:00 2001
+From 72d04f5a6a9b1c7b7d22fec30e19d5d74d8a022c Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 10 Nov 2016 10:13:56 -0800
-Subject: [PATCH 04/47] x86/fpu/xstate: Introduce XSAVES supervisor states
+Subject: [PATCH 04/46] x86/fpu/xstate: Introduce XSAVES supervisor states
 
 Enable XSAVES supervisor states by setting MSR_IA32_XSS bits according to
 CPUID enumeration results.  Also revise comments at various places.
diff --git a/0005-x86-fpu-xstate-Define-new-functions-for-clearing-fpr.patch b/0005-x86-fpu-xstate-Define-new-functions-for-clearing-fpr.patch
index 8fa00f915..9f6765bbb 100644
--- a/0005-x86-fpu-xstate-Define-new-functions-for-clearing-fpr.patch
+++ b/0005-x86-fpu-xstate-Define-new-functions-for-clearing-fpr.patch
@@ -1,7 +1,7 @@
-From a34fee3d7c25f6aecea5a0e860d02ae767c3ad4d Mon Sep 17 00:00:00 2001
+From b9a03d653a44f89354b5983156529d35521e4e06 Mon Sep 17 00:00:00 2001
 From: Fenghua Yu <fenghua.yu@intel.com>
 Date: Thu, 10 Nov 2016 10:13:56 -0800
-Subject: [PATCH 05/47] x86/fpu/xstate: Define new functions for clearing
+Subject: [PATCH 05/46] x86/fpu/xstate: Define new functions for clearing
  fpregs and xstates
 
 Currently, fpu__clear() clears all fpregs and xstates.  Once XSAVES
diff --git a/0006-x86-fpu-xstate-Update-sanitize_restored_xstate-for-s.patch b/0006-x86-fpu-xstate-Update-sanitize_restored_xstate-for-s.patch
index 648f3c3e8..3921b782e 100644
--- a/0006-x86-fpu-xstate-Update-sanitize_restored_xstate-for-s.patch
+++ b/0006-x86-fpu-xstate-Update-sanitize_restored_xstate-for-s.patch
@@ -1,7 +1,7 @@
-From 0c95a36a6df0286cc930383015a32dc532c33513 Mon Sep 17 00:00:00 2001
+From 7d03289e9a416e0407ea05363fe6e8e8442118e0 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 12 Nov 2019 09:09:10 -0800
-Subject: [PATCH 06/47] x86/fpu/xstate: Update sanitize_restored_xstate() for
+Subject: [PATCH 06/46] x86/fpu/xstate: Update sanitize_restored_xstate() for
  supervisor xstates
 
 The function sanitize_restored_xstate() sanitizes user xstates of an XSAVE
diff --git a/0007-x86-fpu-xstate-Update-copy_kernel_to_xregs_err-for-X.patch b/0007-x86-fpu-xstate-Update-copy_kernel_to_xregs_err-for-X.patch
index 4f78d56e9..5555449a1 100644
--- a/0007-x86-fpu-xstate-Update-copy_kernel_to_xregs_err-for-X.patch
+++ b/0007-x86-fpu-xstate-Update-copy_kernel_to_xregs_err-for-X.patch
@@ -1,7 +1,7 @@
-From f0ff1fe6e974753e3eb7e9ff93d143fe1aaf7040 Mon Sep 17 00:00:00 2001
+From a05c6087c855f278cbf559d727a8ebe85adee9c6 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 29 Oct 2019 12:42:06 -0700
-Subject: [PATCH 07/47] x86/fpu/xstate: Update copy_kernel_to_xregs_err() for
+Subject: [PATCH 07/46] x86/fpu/xstate: Update copy_kernel_to_xregs_err() for
  XSAVES supervisor states
 
 The function copy_kernel_to_xregs_err() uses XRSTOR, which can work with
diff --git a/0008-x86-fpu-Introduce-copy_supervisor_to_kernel.patch b/0008-x86-fpu-Introduce-copy_supervisor_to_kernel.patch
index ecfed8ede..5a5a13d9e 100644
--- a/0008-x86-fpu-Introduce-copy_supervisor_to_kernel.patch
+++ b/0008-x86-fpu-Introduce-copy_supervisor_to_kernel.patch
@@ -1,7 +1,7 @@
-From 6f338da085f24d61bf693341ce8719427eb3e7ff Mon Sep 17 00:00:00 2001
+From 1eb33da552f492b352c3c5ae05a55a90d15fde0e Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Mon, 16 Mar 2020 10:29:12 -0700
-Subject: [PATCH 08/47] x86/fpu: Introduce copy_supervisor_to_kernel()
+Subject: [PATCH 08/46] x86/fpu: Introduce copy_supervisor_to_kernel()
 
 The XSAVES instruction takes a mask and saves only the features specified
 in that mask.  The kernel normally specifies that all features be saved.
diff --git a/0009-x86-fpu-xstate-Preserve-supervisor-states-for-slow-p.patch b/0009-x86-fpu-xstate-Preserve-supervisor-states-for-slow-p.patch
index 50139ba31..d9fa04461 100644
--- a/0009-x86-fpu-xstate-Preserve-supervisor-states-for-slow-p.patch
+++ b/0009-x86-fpu-xstate-Preserve-supervisor-states-for-slow-p.patch
@@ -1,7 +1,7 @@
-From 379b9f33b6608343658a0643268b2208fd58ae9b Mon Sep 17 00:00:00 2001
+From 20686fac99fa687e7b2f02bc23cc7cc868edf0a5 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 29 Oct 2019 13:03:10 -0700
-Subject: [PATCH 09/47] x86/fpu/xstate: Preserve supervisor states for slow
+Subject: [PATCH 09/46] x86/fpu/xstate: Preserve supervisor states for slow
  path of __fpu__restore_sig()
 
 The signal return code is responsible for taking an XSAVE buffer present
diff --git a/0010-x86-fpu-xstate-Restore-supervisor-states-for-signal-.patch b/0010-x86-fpu-xstate-Restore-supervisor-states-for-signal-.patch
index 455181faf..543500736 100644
--- a/0010-x86-fpu-xstate-Restore-supervisor-states-for-signal-.patch
+++ b/0010-x86-fpu-xstate-Restore-supervisor-states-for-signal-.patch
@@ -1,7 +1,7 @@
-From 027c18c5b54b650d8a6b97717cf6f541c2aec81d Mon Sep 17 00:00:00 2001
+From 6bd978fecb7a753da35daaac1e99ea98d7df61bf Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Fri, 27 Mar 2020 09:42:02 -0700
-Subject: [PATCH 10/47] x86/fpu/xstate: Restore supervisor states for signal
+Subject: [PATCH 10/46] x86/fpu/xstate: Restore supervisor states for signal
  return
 
 As described in the previous patch, the signal return fast path directly
diff --git a/0011-Documentation-x86-Add-CET-description.patch b/0011-Documentation-x86-Add-CET-description.patch
index dc49daf96..15dd06531 100644
--- a/0011-Documentation-x86-Add-CET-description.patch
+++ b/0011-Documentation-x86-Add-CET-description.patch
@@ -1,14 +1,13 @@
-From 10aa637910c422f3247ef08b94761780fd3c03a3 Mon Sep 17 00:00:00 2001
+From 5d54f6a5b7f3dfea91f77cbd859b0987f428f9b6 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Sun, 17 Dec 2017 09:09:23 -0800
-Subject: [PATCH 11/47] Documentation/x86: Add CET description
+Subject: [PATCH 11/46] Documentation/x86: Add CET description
 
 Explain no_user_shstk/no_user_ibt kernel parameters, and introduce a new
 document on Control-flow Enforcement Technology (CET).
 
 v10:
-- In anticipation of kernel-mode CET, change no_cet_shstk, no_cet_ibt to
-  no_user_shstk, no_user_ibt
+- Change no_cet_shstk and no_cet_ibt to no_user_shstk and no_user_ibt.
 - Remove the opcode section, as it is already in the Intel SDM.
 - Remove sections related to GLIBC implementation.
 - Remove shadow stack memory management section, as it is already in the
@@ -57,7 +56,7 @@ index 265d9e9a093b..2aef972a868d 100644
     amd-memory-encryption
 diff --git a/Documentation/x86/intel_cet.rst b/Documentation/x86/intel_cet.rst
 new file mode 100644
-index 000000000000..46c0b18d5d15
+index 000000000000..746eda8c82f3
 --- /dev/null
 +++ b/Documentation/x86/intel_cet.rst
 @@ -0,0 +1,129 @@
@@ -99,8 +98,8 @@ index 000000000000..46c0b18d5d15
 +    no_user_shstk - disables user shadow stack, and
 +    no_user_ibt   - disables user indirect branch tracking.
 +
-+At run time, /proc/cpuinfo shows CET features if both the kernel and the
-+processor support it.
++At run time, /proc/cpuinfo shows CET features if the processor supports
++CET.
 +
 +[2] Application Enabling
 +========================
@@ -113,7 +112,7 @@ index 000000000000..46c0b18d5d15
 +
 +If an application supports CET and is statically linked, it will run with
 +CET protection.  If the application needs any shared libraries, the loader
-+checks all dependencies and enables CET only when all requirements are met.
++checks all dependencies and enables CET when all requirements are met.
 +
 +[3] CET arch_prctl()'s
 +======================
@@ -142,11 +141,11 @@ index 000000000000..46c0b18d5d15
 +    Allocate a new shadow stack and put a restore token at top.
 +
 +    The parameter 'addr' is a pointer to a user buffer and indicates the
-+    desired shadow stack size to allocate.  On returning to the caller, the
-+    kernel fills '*addr' with the base address of the new shadow stack.
++    shadow stack size to allocate.  On returning to the caller, the kernel
++    fills '*addr' with the base address of the new shadow stack.
 +
-+    User-level threads that need a new stack are expected to allocate a new
-+    shadow stack.
++    User-level threads that need a new stack are expected to allocate a
++    new shadow stack.
 +
 +Note:
 +  There is no CET-enabling arch_prctl function.  By design, CET is enabled
@@ -160,36 +159,36 @@ index 000000000000..46c0b18d5d15
 +
 +A task's shadow stack is allocated from memory to a fixed size of
 +MIN(RLIMIT_STACK, 4 GB).  In other words, the shadow stack is allocated to
-+the maximum size of the normal stack, but capped to 4 GB.  However, because
++the maximum size of the normal stack, but capped to 4 GB.  However,
 +a compat-mode application's address space is smaller, each of its thread's
-+shadow stack size is 1/4 of RLIMIT_STACK.
++shadow stack size is MIN(1/4 RLIMIT_STACK, 4 GB).
 +
 +Signal
 +------
 +
 +The main program and its signal handlers use the same shadow stack.
-+Because the shadow stack stores only return addresses, a large shadow stack
-+will cover the condition that both the program stack and the signal
++Because the shadow stack stores only return addresses, a large shadow
++stack covers the condition that both the program stack and the signal
 +alternate stack run out.
 +
-+The kernel creates a restore token at the shadow stack restoring address and
-+verifies that token when restoring from the signal handler.
++The kernel creates a restore token for the shadow stack restoring address
++and verifies that token when restoring from the signal handler.
 +
 +Fork
 +----
 +
 +The shadow stack's vma has VM_SHSTK flag set; its PTEs are required to be
-+read-only and dirty.  When a shadow PTE is not present, RO, and dirty, a
-+shadow access triggers a page fault with an additional shadow stack bit set
++read-only and dirty.  When a shadow stack PTE is not RO and dirty, a
++shadow access triggers a page fault with the shadow stack access bit set
 +in the page fault error code.
 +
 +When a task forks a child, its shadow stack PTEs are copied and both the
 +parent's and the child's shadow stack PTEs are cleared of the dirty bit.
-+Upon the next shadow stack access, the resulting shadow stack page fault is
-+handled by page copy/re-use.
++Upon the next shadow stack access, the resulting shadow stack page fault
++is handled by page copy/re-use.
 +
-+When a pthread child is created, the kernel allocates a new shadow stack for
-+the new thread.
++When a pthread child is created, the kernel allocates a new shadow stack
++for the new thread.
 -- 
 2.26.0
 
diff --git a/0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.patch b/0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.patch
index c1ca61283..060eac4db 100644
--- a/0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.patch
+++ b/0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.patch
@@ -1,7 +1,7 @@
-From e2e508500808384d103da23b595c5a37076ea6a7 Mon Sep 17 00:00:00 2001
+From de5c791ef731300ec38cc6d6c78f94efb8b7dd67 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Wed, 9 Nov 2016 16:26:37 -0800
-Subject: [PATCH 12/47] x86/cpufeatures: Add CET CPU feature flags for
+Subject: [PATCH 12/46] x86/cpufeatures: Add CET CPU feature flags for
  Control-flow Enforcement Technology (CET)
 
 Add CPU feature flags for Control-flow Enforcement Technology (CET).
diff --git a/0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch b/0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch
index 8f8200d62..865e85a33 100644
--- a/0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch
+++ b/0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch
@@ -1,7 +1,7 @@
-From f18044d5853b83a522412ae06348a4360002b6c8 Mon Sep 17 00:00:00 2001
+From 89469f78288948d9d6ff967fe6835d3ede105a5a Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 10 Nov 2016 10:13:56 -0800
-Subject: [PATCH 13/47] x86/fpu/xstate: Introduce CET MSR XSAVES supervisor
+Subject: [PATCH 13/46] x86/fpu/xstate: Introduce CET MSR XSAVES supervisor
  states
 
 Control-flow Enforcement Technology (CET) adds five MSRs.  Introduce them
diff --git a/0014-x86-cet-Add-control-protection-fault-handler.patch b/0014-x86-cet-Add-control-protection-fault-handler.patch
index f66b31ec7..58a49d77d 100644
--- a/0014-x86-cet-Add-control-protection-fault-handler.patch
+++ b/0014-x86-cet-Add-control-protection-fault-handler.patch
@@ -1,7 +1,7 @@
-From 1e3a68834eddeb338fad77800c9350c453f3d9b3 Mon Sep 17 00:00:00 2001
+From 2908bc1b2067f1e0fcafdc8d188e08078dd28965 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 10 Nov 2016 13:17:46 -0800
-Subject: [PATCH 14/47] x86/cet: Add control-protection fault handler
+Subject: [PATCH 14/46] x86/cet: Add control-protection fault handler
 
 A control-protection fault is triggered when a control-flow transfer
 attempt violates Shadow Stack or Indirect Branch Tracking constraints.
diff --git a/0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch b/0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch
index 33ed9e341..86e42de82 100644
--- a/0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch
+++ b/0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch
@@ -1,49 +1,49 @@
-From 5ee732c12ca40df98839acd506f57e25b6d9cbf0 Mon Sep 17 00:00:00 2001
+From 232bad5c07046a39e2257e83c02dbe8c21bfa155 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 3 Oct 2017 12:55:03 -0700
-Subject: [PATCH 15/47] x86/cet/shstk: Add Kconfig option for user-mode Shadow
- Stack protection
-
-Introduce Kconfig option: X86_INTEL_SHADOW_STACK_USER.
+Subject: [PATCH 15/46] x86/cet/shstk: Add Kconfig option for user-mode Shadow
+ Stack
 
 Shadow Stack provides protection against function return address
-corruption.  It is active when the kernel has this feature enabled, and
-both the processor and the application support it.  When this feature is
+corruption.  It is active when the processor supports it, the kernel has
+CONFIG_X86_INTEL_SHADOW_STACK_USER, and the application is built for the
+feature.  This is only implemented for the 64-bit kernel.  When it is
 enabled, legacy non-shadow stack applications continue to work, but without
 protection.
 
-The user-mode shadow stack protection is only implemented for the 64-bit
-kernel.
-
 v10:
 - Change SHSTK to shadow stack in the help text.
-- Change build-time CET check to config depends on.
-- Revise help text.
+- Change build-time check to config-time check.
+- Change ARCH_HAS_SHSTK to ARCH_HAS_SHADOW_STACK.
+- Add ARCH_HAS_COW_MAPPING.
 
 Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
 ---
- arch/x86/Kconfig                      | 30 +++++++++++++++++++++++++++
+ arch/x86/Kconfig                      | 34 +++++++++++++++++++++++++++
  scripts/as-x86_64-has-shadow-stack.sh |  4 ++++
- 2 files changed, 34 insertions(+)
+ 2 files changed, 38 insertions(+)
  create mode 100755 scripts/as-x86_64-has-shadow-stack.sh
 
 diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
-index 1d6104ea8af0..d80a7299c416 100644
+index 1d6104ea8af0..5a598741da67 100644
 --- a/arch/x86/Kconfig
 +++ b/arch/x86/Kconfig
-@@ -1947,6 +1947,36 @@ config X86_INTEL_TSX_MODE_AUTO
+@@ -1947,6 +1947,40 @@ config X86_INTEL_TSX_MODE_AUTO
  	  side channel attacks- equals the tsx=auto command line parameter.
  endchoice
  
 +config AS_HAS_SHADOW_STACK
 +	def_bool $(success,$(srctree)/scripts/as-x86_64-has-shadow-stack.sh $(CC))
-+	---help---
++	help
 +	  Test the assembler for shadow stack instructions.
 +
 +config X86_INTEL_CET
 +	def_bool n
 +
-+config ARCH_HAS_SHSTK
++config ARCH_HAS_COW_MAPPING
++	def_bool n
++
++config ARCH_HAS_SHADOW_STACK
 +	def_bool n
 +
 +config X86_INTEL_SHADOW_STACK_USER
@@ -53,8 +53,9 @@ index 1d6104ea8af0..d80a7299c416 100644
 +	depends on AS_HAS_SHADOW_STACK
 +	select ARCH_USES_HIGH_VMA_FLAGS
 +	select X86_INTEL_CET
-+	select ARCH_HAS_SHSTK
-+	---help---
++	select ARCH_HAS_COW_MAPPING
++	select ARCH_HAS_SHADOW_STACK
++	help
 +	  Shadow Stacks provides protection against program stack
 +	  corruption.  It's a hardware feature.  This only matters
 +	  if you have the right hardware.  It's a security hardening
diff --git a/0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch b/0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
similarity index 98%
rename from 0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
rename to 0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
index 6a1e3e99b..a169f0314 100644
--- a/0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
+++ b/0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
@@ -1,7 +1,7 @@
-From 70850a4fc2f28fb61d7b4c4ada013988b4076f51 Mon Sep 17 00:00:00 2001
+From 68df1f30e079132efb61245caddf6945a8007489 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 12 Apr 2018 09:32:59 -0700
-Subject: [PATCH 18/47] x86/mm: Change _PAGE_DIRTY to _PAGE_DIRTY_HW
+Subject: [PATCH 16/46] x86/mm: Change _PAGE_DIRTY to _PAGE_DIRTY_HW
 
 Before introducing _PAGE_COW for non-hardware memory management purposes in
 the next patch, rename _PAGE_DIRTY to _PAGE_DIRTY_HW and _PAGE_BIT_DIRTY to
diff --git a/0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch b/0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch
similarity index 76%
rename from 0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch
rename to 0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch
index 87659745d..6ab70fde5 100644
--- a/0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch
+++ b/0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch
@@ -1,8 +1,20 @@
-From 334710b121cbbbddf503e5ab59861398ca076bc5 Mon Sep 17 00:00:00 2001
+From b41aaf2a631128b25e8d57d034b79d3e0ec9ada3 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 14 Apr 2020 14:48:14 -0700
-Subject: [PATCH 19/47] x86/mm: Remove _PAGE_DIRTY from kernel RO pages
+Subject: [PATCH 17/46] x86/mm: Remove _PAGE_DIRTY_HW from kernel RO pages
 
+Kernel read-only PTEs are setup as _PAGE_DIRTY_HW.  Since these become
+shadow stack PTEs, remove the dirty bit.
+
+Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
+Cc: Thomas Gleixner <tglx@linutronix.de>
+Cc: Ingo Molnar <mingo@redhat.com>
+Cc: Borislav Petkov <bp@alien8.de>
+Cc: "H. Peter Anvin" <hpa@zytor.com>
+Cc: Dave Hansen <dave.hansen@linux.intel.com>
+Cc: Andy Lutomirski <luto@kernel.org>
+Cc: Peter Zijlstra <peterz@infradead.org>
+Cc: Kees Cook <keescook@chromium.org>
 ---
  arch/x86/include/asm/pgtable_types.h | 6 +++---
  arch/x86/mm/pat/set_memory.c         | 2 +-
diff --git a/0020-x86-mm-Introduce-_PAGE_COW.patch b/0018-x86-mm-Introduce-_PAGE_COW.patch
similarity index 97%
rename from 0020-x86-mm-Introduce-_PAGE_COW.patch
rename to 0018-x86-mm-Introduce-_PAGE_COW.patch
index 07c09c85a..88ddb8268 100644
--- a/0020-x86-mm-Introduce-_PAGE_COW.patch
+++ b/0018-x86-mm-Introduce-_PAGE_COW.patch
@@ -1,7 +1,7 @@
-From 2dde88de9f1d32d7d1789183100442887900f153 Mon Sep 17 00:00:00 2001
+From d45b78ffd11ddb301c75a16501c0e60a44b46ff6 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Wed, 24 Jan 2018 10:27:13 -0800
-Subject: [PATCH 20/47] x86/mm: Introduce _PAGE_COW
+Subject: [PATCH 18/46] x86/mm: Introduce _PAGE_COW
 
 There is essentially no room left in the x86 hardware PTEs on some OSes
 (not Linux).  That left the hardware architects looking for a way to
@@ -44,6 +44,7 @@ stack is not implemented for the 32-bit kernel.
 v10:
 - Change _PAGE_BIT_DIRTY_SW to _PAGE_BIT_COW, as it is used for copy-on-
   write PTEs.
+- Update pte_write() and treat shadow stack as writable.
 - Use bit test & shifts for moving _PAGE_BIT_DIRTY_HW to _PAGE_BIT_COW.
 - Change static_cpu_has() to cpu_feature_enabled().
 - Revise commit log.
@@ -63,7 +64,7 @@ Reviewed-by: Kees Cook <keescook@chromium.org>
  2 files changed, 145 insertions(+), 12 deletions(-)
 
 diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
-index 90f9a73881ad..133acac9e9b2 100644
+index 90f9a73881ad..fd03ed24ef65 100644
 --- a/arch/x86/include/asm/pgtable.h
 +++ b/arch/x86/include/asm/pgtable.h
 @@ -122,12 +122,11 @@ extern pmdval_t early_pmd_flags;
@@ -137,7 +138,7 @@ index 90f9a73881ad..133acac9e9b2 100644
 +	 * dirty value to the software bit.
 +	 */
 +	if (cpu_feature_enabled(X86_FEATURE_SHSTK) &&
-+	    (_PAGE_BIT_COW < sizeof(pte) * BITS_PER_BYTE)) {
++	    (BITS_PER_BYTE *sizeof(pte) > _PAGE_BIT_COW)) {
 +		pte.pte |= (pte.pte & _PAGE_DIRTY_HW) >>
 +			   _PAGE_BIT_DIRTY_HW << _PAGE_BIT_COW;
 +		pte = pte_clear_flags(pte, _PAGE_DIRTY_HW);
@@ -195,7 +196,7 @@ index 90f9a73881ad..133acac9e9b2 100644
 +	 * dirty value to the software bit.
 +	 */
 +	if (cpu_feature_enabled(X86_FEATURE_SHSTK) &&
-+	    (_PAGE_BIT_COW < sizeof(pmd) * BITS_PER_BYTE)) {
++	    (BITS_PER_BYTE * sizeof(pmd) > _PAGE_BIT_COW)) {
 +		pmd.pmd |= (pmd.pmd & _PAGE_DIRTY_HW) >>
 +			   _PAGE_BIT_DIRTY_HW << _PAGE_BIT_COW;
 +		pmd = pmd_clear_flags(pmd, _PAGE_DIRTY_HW);
@@ -251,7 +252,7 @@ index 90f9a73881ad..133acac9e9b2 100644
 +	 * dirty value to the software bit.
 +	 */
 +	if (cpu_feature_enabled(X86_FEATURE_SHSTK) &&
-+	    (_PAGE_BIT_COW < sizeof(pud) * BITS_PER_BYTE)) {
++	    (BITS_PER_BYTE * sizeof(pud) > _PAGE_BIT_COW)) {
 +		pud.pud |= (pud.pud & _PAGE_DIRTY_HW) >>
 +			   _PAGE_BIT_DIRTY_HW << _PAGE_BIT_COW;
 +		pud = pud_clear_flags(pud, _PAGE_DIRTY_HW);
diff --git a/0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch b/0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
similarity index 89%
rename from 0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
rename to 0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
index 709330ce2..ea4529685 100644
--- a/0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
+++ b/0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
@@ -1,7 +1,7 @@
-From 766d5fd5df290dc10b76f81aaba9f3ef3c6ce679 Mon Sep 17 00:00:00 2001
+From 444c380ebd4259d6d1bffc9e1cac42ba6a9d8fa7 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 28 Aug 2018 13:01:49 -0700
-Subject: [PATCH 21/47] drm/i915/gvt: Change _PAGE_DIRTY to _PAGE_DIRTY_BITS
+Subject: [PATCH 19/46] drm/i915/gvt: Change _PAGE_DIRTY to _PAGE_DIRTY_BITS
 
 After the introduction of _PAGE_COW, a modified page's PTE can have either
 _PAGE_DIRTY_HW or _PAGE_COW.  Change _PAGE_DIRTY to _PAGE_DIRTY_BITS.
diff --git a/0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch b/0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
similarity index 90%
rename from 0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
rename to 0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
index 73db46172..6c8e02d36 100644
--- a/0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
+++ b/0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
@@ -1,10 +1,10 @@
-From cfef77456e0e03961d7e7fcbfa8f673df38a4a65 Mon Sep 17 00:00:00 2001
+From 670620e225b349abdd61511023ecc917ccdbec5d Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 29 Aug 2019 09:24:13 -0700
-Subject: [PATCH 22/47] x86/mm: Update pte_modify and pmd_modify for _PAGE_COW
+Subject: [PATCH 20/46] x86/mm: Update pte_modify and pmd_modify for _PAGE_COW
 
 Pte_modify() changes a PTE to 'newprot'.  It doesn't use the pte_*()
-helpers that the previous patch fixed up, so we need a new site.
+helpers that a previous patch fixed up, so we need a new site.
 
 Introduce fixup_dirty_pte() to fixup the PTE, depending on the PTE is
 writable or copy-on-write.  Apply the same changes to pmd_modify().
@@ -21,7 +21,7 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  1 file changed, 33 insertions(+)
 
 diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
-index 133acac9e9b2..3f83f7bee3df 100644
+index fd03ed24ef65..b76b9491e11f 100644
 --- a/arch/x86/include/asm/pgtable.h
 +++ b/arch/x86/include/asm/pgtable.h
 @@ -724,6 +724,21 @@ static inline pmd_t pmd_mknotpresent(pmd_t pmd)
diff --git a/0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch b/0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
similarity index 96%
rename from 0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
rename to 0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
index c35a002e9..464fa9bcb 100644
--- a/0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
+++ b/0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
@@ -1,7 +1,7 @@
-From 8b05a80157213bc8534e96b324b055f547b2b7de Mon Sep 17 00:00:00 2001
+From 9baa1f751d088e170153debf1f6fc3d01d13aa24 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Fri, 15 Jun 2018 09:33:40 -0700
-Subject: [PATCH 23/47] x86/mm: Update ptep_set_wrprotect() and
+Subject: [PATCH 21/46] x86/mm: Update ptep_set_wrprotect() and
  pmdp_set_wrprotect() for transition from _PAGE_DIRTY_HW to _PAGE_COW
 
 When shadow stack is enabled, [R/O + _PAGE_DIRTY_HW] PTE is reserved only
@@ -45,7 +45,7 @@ Reviewed-by: Kees Cook <keescook@chromium.org>
  1 file changed, 52 insertions(+)
 
 diff --git a/arch/x86/include/asm/pgtable.h b/arch/x86/include/asm/pgtable.h
-index 3f83f7bee3df..4b8b9f8b9ef3 100644
+index b76b9491e11f..0270e04e3505 100644
 --- a/arch/x86/include/asm/pgtable.h
 +++ b/arch/x86/include/asm/pgtable.h
 @@ -1314,6 +1314,32 @@ static inline pte_t ptep_get_and_clear_full(struct mm_struct *mm,
diff --git a/0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch b/0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
similarity index 91%
rename from 0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
rename to 0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
index 5ee69a1da..4a53662fc 100644
--- a/0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
+++ b/0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
@@ -1,13 +1,12 @@
-From f6948194f29a49dccfde8e68a0af95d8350fe617 Mon Sep 17 00:00:00 2001
+From 16a928c9a89b9b11fbb4ce4eaa6f8e43366e105f Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Fri, 12 Jan 2018 15:04:54 -0800
-Subject: [PATCH 16/47] mm: Introduce VM_SHSTK for Shadow Stack memory
+Subject: [PATCH 22/46] mm: Introduce VM_SHSTK for Shadow Stack memory
 
 A Shadow Stack PTE must be read-only and have _PAGE_DIRTY set.  However,
 read-only and Dirty PTEs also exist for copy-on-write (COW) pages.  These
-two cases are handled differently for page faults.
-
-Introduce VM_SHSTK to track shadow stack VMAs.
+two cases are handled differently for page faults.  Introduce VM_SHSTK to
+track shadow stack VMAs.
 
 v9:
 - Add VM_SHSTK case to arch_vma_name().
diff --git a/0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch b/0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch
similarity index 93%
rename from 0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch
rename to 0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch
index e83850197..fcb468b4d 100644
--- a/0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch
+++ b/0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch
@@ -1,7 +1,7 @@
-From 2d7c838bc062a8f4a5d883885e21e4bf8d89192a Mon Sep 17 00:00:00 2001
+From 244f95ae55ebbb9ddbea707f151cb303442e59d6 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 28 Nov 2017 13:01:18 -0800
-Subject: [PATCH 25/47] x86/mm: Shadow Stack page fault error checking
+Subject: [PATCH 23/46] x86/mm: Shadow Stack page fault error checking
 
 Shadow stack accesses are those that are performed by the CPU where it
 expects to encounter a shadow stack mapping.  These accesses are performed
@@ -54,7 +54,7 @@ index 9bf804709ee6..b4f4c725a350 100644
  };
  #endif /* _ASM_X86_TRAPS_H */
 diff --git a/arch/x86/mm/fault.c b/arch/x86/mm/fault.c
-index a51df516b87b..67fd5c56785a 100644
+index a51df516b87b..e95eee82b48e 100644
 --- a/arch/x86/mm/fault.c
 +++ b/arch/x86/mm/fault.c
 @@ -1210,6 +1210,17 @@ access_error(unsigned long error_code, struct vm_area_struct *vma)
@@ -64,7 +64,7 @@ index a51df516b87b..67fd5c56785a 100644
 +	/*
 +	 * Verify a shadow stack access is within a shadow stack VMA.
 +	 * It is always an error otherwise.  Normal data access to a
-+	 * shadow stack area falls through to the next case.
++	 * shadow stack area is checked in the next case.
 +	 */
 +	if (error_code & X86_PF_SHSTK) {
 +		if (!(vma->vm_flags & VM_SHSTK))
diff --git a/0024-x86-mm-Introduce-arch_cow_mapping.patch b/0024-x86-mm-Introduce-arch_cow_mapping.patch
deleted file mode 100644
index 9e3b555c3..000000000
--- a/0024-x86-mm-Introduce-arch_cow_mapping.patch
+++ /dev/null
@@ -1,69 +0,0 @@
-From ffa514a61022d9d5e0aedb1b6c2ca336e7a57024 Mon Sep 17 00:00:00 2001
-From: Yu-cheng Yu <yu-cheng.yu@intel.com>
-Date: Tue, 7 Apr 2020 16:03:36 -0700
-Subject: [PATCH 24/47] x86/mm: Introduce arch_cow_mapping()
-
-Shadow stack is logically copy-on-write.
-
-Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
----
- arch/x86/mm/pgtable.c         |  7 +++++++
- include/asm-generic/pgtable.h | 11 +++++++++++
- mm/internal.h                 |  3 ++-
- 3 files changed, 20 insertions(+), 1 deletion(-)
-
-diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c
-index 7bd2c3a52297..2e12e2036e43 100644
---- a/arch/x86/mm/pgtable.c
-+++ b/arch/x86/mm/pgtable.c
-@@ -871,4 +871,11 @@ int pmd_free_pte_page(pmd_t *pmd, unsigned long addr)
- }
- 
- #endif /* CONFIG_X86_64 */
-+
-+#ifdef CONFIG_X86_INTEL_SHADOW_STACK_USER
-+bool arch_cow_mapping(vm_flags_t vm_flags)
-+{
-+	return (vm_flags & VM_SHSTK);
-+}
-+#endif
- #endif	/* CONFIG_HAVE_ARCH_HUGE_VMAP */
-diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h
-index 329b8c8ca703..0532c8a65b36 100644
---- a/include/asm-generic/pgtable.h
-+++ b/include/asm-generic/pgtable.h
-@@ -1191,6 +1191,17 @@ static inline bool arch_has_pfn_modify_check(void)
- }
- #endif /* !_HAVE_ARCH_PFN_MODIFY_ALLOWED */
- 
-+#ifdef CONFIG_MMU
-+#ifndef CONFIG_ARCH_HAS_SHSTK
-+static inline bool arch_cow_mapping(vm_flags_t vm_flags)
-+{
-+	return false;
-+}
-+#else
-+bool arch_cow_mapping(vm_flags_t vm_flags);
-+#endif
-+#endif /* CONFIG_MMU */
-+
- /*
-  * Architecture PAGE_KERNEL_* fallbacks
-  *
-diff --git a/mm/internal.h b/mm/internal.h
-index b5634e78f01d..144b5abd7c0a 100644
---- a/mm/internal.h
-+++ b/mm/internal.h
-@@ -283,7 +283,8 @@ static inline unsigned int page_order(struct page *page)
- 
- static inline bool is_cow_mapping(vm_flags_t flags)
- {
--	return (flags & (VM_SHARED | VM_MAYWRITE)) == VM_MAYWRITE;
-+	return ((flags & (VM_SHARED | VM_MAYWRITE)) == VM_MAYWRITE) ||
-+		arch_cow_mapping(flags);
- }
- 
- /*
--- 
-2.26.0
-
diff --git a/0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch b/0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch
new file mode 100644
index 000000000..229f6306a
--- /dev/null
+++ b/0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch
@@ -0,0 +1,143 @@
+From f6bc7b365d6aa922be27900d40a9f8bab8731077 Mon Sep 17 00:00:00 2001
+From: Yu-cheng Yu <yu-cheng.yu@intel.com>
+Date: Tue, 7 Apr 2020 16:03:36 -0700
+Subject: [PATCH 24/46] x86/mm: Update is_cow_mapping() and maybe_mkwrite() for
+ shadow stack
+
+Shadow stack is writable by WRUSSQ/WRUSSD and by CALL (but indirectly).
+Thus, in handling page faults, shadow stack is treated as logically
+writable.  Update is_cow_mapping() and maybe_mkwrite() to include the
+shadow stack.
+
+Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
+---
+ arch/x86/mm/pgtable.c         | 25 +++++++++++++++++++++++++
+ include/asm-generic/pgtable.h | 29 +++++++++++++++++++++++++++++
+ include/linux/mm.h            |  2 ++
+ mm/huge_memory.c              |  2 ++
+ mm/internal.h                 |  3 ++-
+ 5 files changed, 60 insertions(+), 1 deletion(-)
+
+diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c
+index 7bd2c3a52297..6dddde290d53 100644
+--- a/arch/x86/mm/pgtable.c
++++ b/arch/x86/mm/pgtable.c
+@@ -603,6 +603,24 @@ int pmdp_clear_flush_young(struct vm_area_struct *vma,
+ }
+ #endif
+ 
++#ifdef CONFIG_ARCH_HAS_COW_MAPPING
++pte_t arch_maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
++{
++	if (likely(vma->vm_flags & VM_SHSTK))
++		pte = pte_mkdirty_shstk(pte);
++	return pte;
++}
++
++#ifdef CONFIG_TRANSPARENT_HUGEPAGE
++pmd_t arch_maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)
++{
++	if (likely(vma->vm_flags & VM_SHSTK))
++		pmd = pmd_mkdirty_shstk(pmd);
++	return pmd;
++}
++#endif /* CONFIG_TRANSPARENT_HUGEPAGE */
++#endif /* CONFIG_ARCH_HAS_COW_MAPPING */
++
+ /**
+  * reserve_top_address - reserves a hole in the top of kernel address space
+  * @reserve - size of hole to reserve
+@@ -872,3 +890,10 @@ int pmd_free_pte_page(pmd_t *pmd, unsigned long addr)
+ 
+ #endif /* CONFIG_X86_64 */
+ #endif	/* CONFIG_HAVE_ARCH_HUGE_VMAP */
++
++#ifdef CONFIG_ARCH_HAS_COW_MAPPING
++bool arch_cow_mapping(vm_flags_t vm_flags)
++{
++	return (vm_flags & VM_SHSTK);
++}
++#endif
+diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h
+index 329b8c8ca703..3aaf192dbef6 100644
+--- a/include/asm-generic/pgtable.h
++++ b/include/asm-generic/pgtable.h
+@@ -1191,6 +1191,35 @@ static inline bool arch_has_pfn_modify_check(void)
+ }
+ #endif /* !_HAVE_ARCH_PFN_MODIFY_ALLOWED */
+ 
++#ifdef CONFIG_MMU
++#ifdef CONFIG_ARCH_HAS_COW_MAPPING
++bool arch_cow_mapping(vm_flags_t vm_flags);
++pte_t arch_maybe_mkwrite(pte_t pte, struct vm_area_struct *vma);
++
++#ifdef CONFIG_TRANSPARENT_HUGEPAGE
++pmd_t arch_maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma);
++#endif /* CONFIG_TRANSPARENT_HUGEPAGE */
++
++#else /* !CONFIG_ARCH_HAS_COW_MAPPING */
++static inline bool arch_cow_mapping(vm_flags_t vm_flags)
++{
++	return false;
++}
++static inline pte_t arch_maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
++{
++	return pte;
++}
++
++#ifdef CONFIG_TRANSPARENT_HUGEPAGE
++static inline pmd_t arch_maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)
++{
++	return pmd;
++}
++#endif /* CONFIG_TRANSPARENT_HUGEPAGE */
++
++#endif /* CONFIG_ARCH_HAS_COW_MAPPING */
++#endif /* CONFIG_MMU */
++
+ /*
+  * Architecture PAGE_KERNEL_* fallbacks
+  *
+diff --git a/include/linux/mm.h b/include/linux/mm.h
+index 54bb4cd9fee8..f0669e3cdd37 100644
+--- a/include/linux/mm.h
++++ b/include/linux/mm.h
+@@ -944,6 +944,8 @@ static inline pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
+ {
+ 	if (likely(vma->vm_flags & VM_WRITE))
+ 		pte = pte_mkwrite(pte);
++	else
++		pte = arch_maybe_mkwrite(pte, vma);
+ 	return pte;
+ }
+ 
+diff --git a/mm/huge_memory.c b/mm/huge_memory.c
+index 6ecd1045113b..608746bb9d19 100644
+--- a/mm/huge_memory.c
++++ b/mm/huge_memory.c
+@@ -485,6 +485,8 @@ pmd_t maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)
+ {
+ 	if (likely(vma->vm_flags & VM_WRITE))
+ 		pmd = pmd_mkwrite(pmd);
++	else
++		pmd = arch_maybe_pmd_mkwrite(pmd, vma);
+ 	return pmd;
+ }
+ 
+diff --git a/mm/internal.h b/mm/internal.h
+index b5634e78f01d..144b5abd7c0a 100644
+--- a/mm/internal.h
++++ b/mm/internal.h
+@@ -283,7 +283,8 @@ static inline unsigned int page_order(struct page *page)
+ 
+ static inline bool is_cow_mapping(vm_flags_t flags)
+ {
+-	return (flags & (VM_SHARED | VM_MAYWRITE)) == VM_MAYWRITE;
++	return ((flags & (VM_SHARED | VM_MAYWRITE)) == VM_MAYWRITE) ||
++		arch_cow_mapping(flags);
+ }
+ 
+ /*
+-- 
+2.26.0
+
diff --git a/0025-mm-Update-do_anonymous_page-and-do_numa_page.patch b/0025-mm-Update-do_anonymous_page-and-do_numa_page.patch
new file mode 100644
index 000000000..318fbb787
--- /dev/null
+++ b/0025-mm-Update-do_anonymous_page-and-do_numa_page.patch
@@ -0,0 +1,56 @@
+From 4a6dbdbb9c032b9c3f7bc093b48328ee07fe106e Mon Sep 17 00:00:00 2001
+From: Yu-cheng Yu <yu-cheng.yu@intel.com>
+Date: Mon, 13 Apr 2020 13:21:22 -0700
+Subject: [PATCH 25/46] mm: Update do_anonymous_page() and do_numa_page()
+
+In handling page faults, do_anonymous_page()/do_numa_page() makes a page
+writable if the VMA is writable.  Update them to include shadow stack.
+
+Also fix a similar situation for migrate_vma_insert_page().
+
+Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
+---
+ mm/memory.c  | 5 ++---
+ mm/migrate.c | 3 +--
+ 2 files changed, 3 insertions(+), 5 deletions(-)
+
+diff --git a/mm/memory.c b/mm/memory.c
+index f703fe8c8346..b9002f644806 100644
+--- a/mm/memory.c
++++ b/mm/memory.c
+@@ -3373,8 +3373,7 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
+ 	__SetPageUptodate(page);
+ 
+ 	entry = mk_pte(page, vma->vm_page_prot);
+-	if (vma->vm_flags & VM_WRITE)
+-		entry = pte_mkwrite(pte_mkdirty(entry));
++	entry = maybe_mkwrite(pte_mkdirty(entry), vma);
+ 
+ 	vmf->pte = pte_offset_map_lock(vma->vm_mm, vmf->pmd, vmf->address,
+ 			&vmf->ptl);
+@@ -4033,7 +4032,7 @@ static vm_fault_t do_numa_page(struct vm_fault *vmf)
+ 	pte = pte_modify(old_pte, vma->vm_page_prot);
+ 	pte = pte_mkyoung(pte);
+ 	if (was_writable)
+-		pte = pte_mkwrite(pte);
++		pte = maybe_mkwrite(pte, vma);
+ 	ptep_modify_prot_commit(vma, vmf->address, vmf->pte, old_pte, pte);
+ 	update_mmu_cache(vma, vmf->address, vmf->pte);
+ 
+diff --git a/mm/migrate.c b/mm/migrate.c
+index 7160c1556f79..0fa59b1562c6 100644
+--- a/mm/migrate.c
++++ b/mm/migrate.c
+@@ -2805,8 +2805,7 @@ static void migrate_vma_insert_page(struct migrate_vma *migrate,
+ 		}
+ 	} else {
+ 		entry = mk_pte(page, vma->vm_page_prot);
+-		if (vma->vm_flags & VM_WRITE)
+-			entry = pte_mkwrite(pte_mkdirty(entry));
++		entry = maybe_mkwrite(pte_mkdirty(entry), vma);
+ 	}
+ 
+ 	ptep = pte_offset_map_lock(mm, pmdp, addr, &ptl);
+-- 
+2.26.0
+
diff --git a/0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch b/0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch
deleted file mode 100644
index f7364ea7f..000000000
--- a/0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch
+++ /dev/null
@@ -1,39 +0,0 @@
-From 17d659a4be16b6e3c916427f301e21be821fc602 Mon Sep 17 00:00:00 2001
-From: Yu-cheng Yu <yu-cheng.yu@intel.com>
-Date: Mon, 13 Apr 2020 08:11:41 -0700
-Subject: [PATCH 26/47] Update maybe_mkwrite()/maybe_pmd_mkwrite()
-
----
- include/linux/mm.h | 2 ++
- mm/huge_memory.c   | 2 ++
- 2 files changed, 4 insertions(+)
-
-diff --git a/include/linux/mm.h b/include/linux/mm.h
-index 445746195f8d..021d49c060cd 100644
---- a/include/linux/mm.h
-+++ b/include/linux/mm.h
-@@ -944,6 +944,8 @@ static inline pte_t maybe_mkwrite(pte_t pte, struct vm_area_struct *vma)
- {
- 	if (likely(vma->vm_flags & VM_WRITE))
- 		pte = pte_mkwrite(pte);
-+	else if (arch_cow_mapping(vma->vm_flags))
-+		pte = pte_mkdirty_shstk(pte);
- 	return pte;
- }
- 
-diff --git a/mm/huge_memory.c b/mm/huge_memory.c
-index 6ecd1045113b..a89eeded8f8f 100644
---- a/mm/huge_memory.c
-+++ b/mm/huge_memory.c
-@@ -485,6 +485,8 @@ pmd_t maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma)
- {
- 	if (likely(vma->vm_flags & VM_WRITE))
- 		pmd = pmd_mkwrite(pmd);
-+	else if (arch_cow_mapping(vma->vm_flags))
-+		pmd = pmd_mkdirty_shstk(pmd);
- 	return pmd;
- }
- 
--- 
-2.26.0
-
diff --git a/0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch b/0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
similarity index 92%
rename from 0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
rename to 0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
index 813931f33..cb102edf1 100644
--- a/0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
+++ b/0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
@@ -1,11 +1,11 @@
-From f5bd5af48390b077c637dc8fcb615040faa492ae Mon Sep 17 00:00:00 2001
+From f4435ca6ff5098e3601843af248c9708187ad418 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 3 Jul 2018 13:07:12 -0700
-Subject: [PATCH 28/47] mm: Update can_follow_write_pte() for Shadow Stack
+Subject: [PATCH 26/46] mm: Update can_follow_write_pte() for Shadow Stack
 
 Can_follow_write_pte() verifies that a read-only page is the task's own
 copy by ensuring the page has gone through faultin_page() and the PTE is
-Dirty.  A shadow stack PTE in copy-on-write status is still dirty.
+Dirty.  However, a shadow stack PTE in copy-on-write status is still dirty.
 Update the read-only check to exclude the case.
 
 Also apply same changes to the huge memory case.
@@ -50,7 +50,7 @@ index 6076df8e04a4..a2e413d26f96 100644
  		return NULL;
  	}
 diff --git a/mm/huge_memory.c b/mm/huge_memory.c
-index a89eeded8f8f..d23be58ae4ad 100644
+index 608746bb9d19..c93db1a1587f 100644
 --- a/mm/huge_memory.c
 +++ b/mm/huge_memory.c
 @@ -1520,10 +1520,12 @@ vm_fault_t do_huge_pmd_wp_page(struct vm_fault *vmf, pmd_t orig_pmd)
diff --git a/0027-mm-Fix-do_anonymous_page.patch b/0027-mm-Fix-do_anonymous_page.patch
deleted file mode 100644
index 884980fb1..000000000
--- a/0027-mm-Fix-do_anonymous_page.patch
+++ /dev/null
@@ -1,26 +0,0 @@
-From 97eb4045ce8211ca46e85c618b68a5652e7f3c9b Mon Sep 17 00:00:00 2001
-From: Yu-cheng Yu <yu-cheng.yu@intel.com>
-Date: Mon, 13 Apr 2020 13:21:22 -0700
-Subject: [PATCH 27/47] mm: Fix do_anonymous_page()
-
----
- mm/memory.c | 3 +--
- 1 file changed, 1 insertion(+), 2 deletions(-)
-
-diff --git a/mm/memory.c b/mm/memory.c
-index f703fe8c8346..30e116cbe14e 100644
---- a/mm/memory.c
-+++ b/mm/memory.c
-@@ -3373,8 +3373,7 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
- 	__SetPageUptodate(page);
- 
- 	entry = mk_pte(page, vma->vm_page_prot);
--	if (vma->vm_flags & VM_WRITE)
--		entry = pte_mkwrite(pte_mkdirty(entry));
-+	entry = maybe_mkwrite(pte_mkdirty(entry), vma);
- 
- 	vmf->pte = pte_offset_map_lock(vma->vm_mm, vmf->pmd, vmf->address,
- 			&vmf->ptl);
--- 
-2.26.0
-
diff --git a/0017-Add-guard-pages-around-a-Shadow-Stack.patch b/0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch
similarity index 89%
rename from 0017-Add-guard-pages-around-a-Shadow-Stack.patch
rename to 0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch
index 36d57e675..192fe7534 100644
--- a/0017-Add-guard-pages-around-a-Shadow-Stack.patch
+++ b/0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch
@@ -1,7 +1,7 @@
-From 4b47b5b5311a1f6e69feaa658fa74c4ffa6091ce Mon Sep 17 00:00:00 2001
+From 96d704f5a2453bb2c761d28306db4377d04e3b54 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Fri, 4 Oct 2019 14:00:58 -0700
-Subject: [PATCH 17/47] Add guard pages around a Shadow Stack.
+Subject: [PATCH 27/46] x86/mm: Add guard pages around a Shadow Stack.
 
 INCSSPQ/D increment shadow stack pointer and 'pop and discard' the first
 and the last elements in the range, effectively touch those memory areas.
@@ -45,10 +45,10 @@ index 3bcf27caf6c9..d0e20d31976a 100644
  	.addr_limit		= KERNEL_DS,			\
  }
 diff --git a/include/linux/mm.h b/include/linux/mm.h
-index 54bb4cd9fee8..445746195f8d 100644
+index f0669e3cdd37..68eadf2c466d 100644
 --- a/include/linux/mm.h
 +++ b/include/linux/mm.h
-@@ -2628,6 +2628,10 @@ void page_cache_async_readahead(struct address_space *mapping,
+@@ -2630,6 +2630,10 @@ void page_cache_async_readahead(struct address_space *mapping,
  				pgoff_t offset,
  				unsigned long size);
  
@@ -59,7 +59,7 @@ index 54bb4cd9fee8..445746195f8d 100644
  extern unsigned long stack_guard_gap;
  /* Generic expand stack which grows the stack according to GROWS{UP,DOWN} */
  extern int expand_stack(struct vm_area_struct *vma, unsigned long address);
-@@ -2660,9 +2664,15 @@ static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * m
+@@ -2662,9 +2666,15 @@ static inline struct vm_area_struct * find_vma_intersection(struct mm_struct * m
  static inline unsigned long vm_start_gap(struct vm_area_struct *vma)
  {
  	unsigned long vm_start = vma->vm_start;
@@ -77,7 +77,7 @@ index 54bb4cd9fee8..445746195f8d 100644
  		if (vm_start > vma->vm_start)
  			vm_start = 0;
  	}
-@@ -2672,9 +2682,15 @@ static inline unsigned long vm_start_gap(struct vm_area_struct *vma)
+@@ -2674,9 +2684,15 @@ static inline unsigned long vm_start_gap(struct vm_area_struct *vma)
  static inline unsigned long vm_end_gap(struct vm_area_struct *vma)
  {
  	unsigned long vm_end = vma->vm_end;
diff --git a/0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch b/0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
new file mode 100644
index 000000000..58caba5fb
--- /dev/null
+++ b/0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
@@ -0,0 +1,83 @@
+From 8c5106741e1026bca6af8f2ad80dfcefc0d8c753 Mon Sep 17 00:00:00 2001
+From: Yu-cheng Yu <yu-cheng.yu@intel.com>
+Date: Thu, 13 Sep 2018 12:36:48 -0700
+Subject: [PATCH 28/46] mm/mmap: Add Shadow Stack pages to memory accounting
+
+Add Shadow Stack pages to memory accounting.
+
+v10:
+- Use arch_shadow_stack_mapping() to make the meaning clear.
+
+v8:
+- Change Shadow Stake pages from data_vm to stack_vm.
+
+Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
+---
+ arch/x86/mm/pgtable.c         |  7 +++++++
+ include/asm-generic/pgtable.h | 11 +++++++++++
+ mm/mmap.c                     |  5 +++++
+ 3 files changed, 23 insertions(+)
+
+diff --git a/arch/x86/mm/pgtable.c b/arch/x86/mm/pgtable.c
+index 6dddde290d53..796a449150c1 100644
+--- a/arch/x86/mm/pgtable.c
++++ b/arch/x86/mm/pgtable.c
+@@ -897,3 +897,10 @@ bool arch_cow_mapping(vm_flags_t vm_flags)
+ 	return (vm_flags & VM_SHSTK);
+ }
+ #endif
++
++#ifdef CONFIG_ARCH_HAS_SHADOW_STACK
++bool arch_shadow_stack_mapping(vm_flags_t vm_flags)
++{
++	return (vm_flags & VM_SHSTK);
++}
++#endif
+diff --git a/include/asm-generic/pgtable.h b/include/asm-generic/pgtable.h
+index 3aaf192dbef6..aee89979c0df 100644
+--- a/include/asm-generic/pgtable.h
++++ b/include/asm-generic/pgtable.h
+@@ -1220,6 +1220,17 @@ static inline pmd_t arch_maybe_pmd_mkwrite(pmd_t pmd, struct vm_area_struct *vma
+ #endif /* CONFIG_ARCH_HAS_COW_MAPPING */
+ #endif /* CONFIG_MMU */
+ 
++#ifdef CONFIG_MMU
++#ifdef CONFIG_ARCH_HAS_SHADOW_STACK
++bool arch_shadow_stack_mapping(vm_flags_t vm_flags);
++#else
++static inline bool arch_shadow_stack_mapping(vm_flags_t vm_flags)
++{
++	return false;
++}
++#endif /* CONFIG_ARCH_HAS_SHADOW_STACK */
++#endif /* CONFIG_MMU */
++
+ /*
+  * Architecture PAGE_KERNEL_* fallbacks
+  *
+diff --git a/mm/mmap.c b/mm/mmap.c
+index f609e9ec4a25..70d240b3559c 100644
+--- a/mm/mmap.c
++++ b/mm/mmap.c
+@@ -1681,6 +1681,9 @@ static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)
+ 	if (file && is_file_hugepages(file))
+ 		return 0;
+ 
++	if (arch_shadow_stack_mapping(vm_flags))
++		return 1;
++
+ 	return (vm_flags & (VM_NORESERVE | VM_SHARED | VM_WRITE)) == VM_WRITE;
+ }
+ 
+@@ -3318,6 +3321,8 @@ void vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)
+ 		mm->stack_vm += npages;
+ 	else if (is_data_mapping(flags))
+ 		mm->data_vm += npages;
++	else if (arch_shadow_stack_mapping(flags))
++		mm->stack_vm += npages;
+ }
+ 
+ static vm_fault_t special_mapping_fault(struct vm_fault *vmf);
+-- 
+2.26.0
+
diff --git a/0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch b/0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch
index df085bd29..fbba25f01 100644
--- a/0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch
+++ b/0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch
@@ -1,7 +1,7 @@
-From 8909dec7c9a6f8434bb8d3ea3240f78ffb2217e1 Mon Sep 17 00:00:00 2001
+From 2dcb1cd7a907f9289ece4311ea3f84d2aab7c0d7 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 22 Aug 2019 10:06:11 -0700
-Subject: [PATCH 29/47] x86/cet/shstk: User-mode Shadow Stack support
+Subject: [PATCH 29/46] x86/cet/shstk: User-mode Shadow Stack support
 
 This patch adds basic shadow stack  enabling/disabling routines.  A task's
 shadow stack is allocated from memory with VM_SHSTK flag and read-only
@@ -11,12 +11,13 @@ v10:
 - Change no_cet_shstk to no_user_shstk.
 - Limit shadow stack size to 4 GB, and round_up to PAGE_SIZE.
 - Replace checking shstk_enabled with shstk_size being zero.
-- Add WARN_ON_ONCE() when vm_munmap() fails.
+- Retry and WARN_ON_ONCE() when vm_munmap() fails.
 
 v9:
 - Change cpu_feature_enabled() to static_cpu_has().
 - Merge cet_disable_shstk to cet_disable_free_shstk.
-- Remove the empty slot at the top of the shadow stack, as it is not needed.
+- Remove the empty slot at the top of the shadow stack, as it is not
+  needed.
 - Move do_mmap_locked() to alloc_shstk(), which is a static function.
 
 v6:
@@ -31,11 +32,11 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  arch/x86/include/asm/disabled-features.h      |   8 +-
  arch/x86/include/asm/processor.h              |   5 +
  arch/x86/kernel/Makefile                      |   2 +
- arch/x86/kernel/cet.c                         | 120 ++++++++++++++++++
+ arch/x86/kernel/cet.c                         | 135 ++++++++++++++++++
  arch/x86/kernel/cpu/common.c                  |  28 ++++
  arch/x86/kernel/process.c                     |   1 +
  .../arch/x86/include/asm/disabled-features.h  |   8 +-
- 8 files changed, 196 insertions(+), 2 deletions(-)
+ 8 files changed, 211 insertions(+), 2 deletions(-)
  create mode 100644 arch/x86/include/asm/cet.h
  create mode 100644 arch/x86/kernel/cet.c
 
@@ -135,10 +136,10 @@ index ba89cabe5fcf..e9cc2551573b 100644
  ifeq ($(CONFIG_X86_64),y)
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
 new file mode 100644
-index 000000000000..72822aa17062
+index 000000000000..56113a1338af
 --- /dev/null
 +++ b/arch/x86/kernel/cet.c
-@@ -0,0 +1,120 @@
+@@ -0,0 +1,135 @@
 +/* SPDX-License-Identifier: GPL-2.0 */
 +/*
 + * cet.c - Control-flow Enforcement (CET)
@@ -255,7 +256,22 @@ index 000000000000..72822aa17062
 +		end_update_msrs();
 +	}
 +
-+	vm_munmap(cet->shstk_base, cet->shstk_size);
++	while (1) {
++		int r;
++
++		r = vm_munmap(cet->shstk_base, cet->shstk_size);
++
++		/*
++		 * Retry if mmap_sem is not available.
++		 */
++		if (r == -EINTR) {
++			might_sleep();
++			continue;
++		}
++
++		WARN_ON_ONCE(r);
++		break;
++	}
 +	cet->shstk_base = 0;
 +	cet->shstk_size = 0;
 +}
diff --git a/0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch b/0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch
index e52b51f75..7f6996535 100644
--- a/0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch
+++ b/0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch
@@ -1,7 +1,7 @@
-From b695467b022928d6fea6a74598a8f1b64e18be37 Mon Sep 17 00:00:00 2001
+From 3f7b50666a8575a4bee295c45aea544df58948d8 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 5 Jan 2017 13:48:31 -0800
-Subject: [PATCH 30/47] x86/cet/shstk: Handle signals for Shadow Stack
+Subject: [PATCH 30/46] x86/cet/shstk: Handle signals for Shadow Stack
 
 To deliver a signal, create a shadow stack restore token and put a restore
 token and the signal restorer address on the shadow stack.  For sigreturn,
@@ -199,7 +199,7 @@ index 844d60eb1882..cf2d55db3be4 100644
   * The 32-bit signal frame:
   */
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
-index 72822aa17062..8b901fcb159b 100644
+index 56113a1338af..c9344ad50ba5 100644
 --- a/arch/x86/kernel/cet.c
 +++ b/arch/x86/kernel/cet.c
 @@ -19,6 +19,8 @@
@@ -292,7 +292,7 @@ index 72822aa17062..8b901fcb159b 100644
  int cet_setup_shstk(void)
  {
  	unsigned long addr, size;
-@@ -118,3 +194,84 @@ void cet_disable_free_shstk(struct task_struct *tsk)
+@@ -133,3 +209,84 @@ void cet_disable_free_shstk(struct task_struct *tsk)
  	cet->shstk_base = 0;
  	cet->shstk_size = 0;
  }
diff --git a/0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch b/0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch
index 07008fb26..9e7da60d0 100644
--- a/0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch
+++ b/0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch
@@ -1,7 +1,7 @@
-From 58c99a4e926db6635f08c7708269a9bdcc48365d Mon Sep 17 00:00:00 2001
+From 9be1304eb0a3c5f80caa41c37f77a9ff9c254ed7 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Fri, 18 Oct 2019 18:25:34 +0100
-Subject: [PATCH 31/47] ELF: UAPI and Kconfig additions for ELF program
+Subject: [PATCH 31/46] ELF: UAPI and Kconfig additions for ELF program
  properties
 
 Introduce basic ELF definitions relating to the NT_GNU_PROPERTY_TYPE_0
diff --git a/0032-ELF-Add-ELF-program-property-parsing-support.patch b/0032-ELF-Add-ELF-program-property-parsing-support.patch
index 4ba787080..536921552 100644
--- a/0032-ELF-Add-ELF-program-property-parsing-support.patch
+++ b/0032-ELF-Add-ELF-program-property-parsing-support.patch
@@ -1,7 +1,7 @@
-From eb881b76cd6d82676e70e50c5b9f31942f14bccc Mon Sep 17 00:00:00 2001
+From 56fdfaccaffea8049fa14ff0e08bca4b8b2f0b9c Mon Sep 17 00:00:00 2001
 From: Dave Martin <Dave.Martin@arm.com>
 Date: Mon, 16 Mar 2020 16:50:44 +0000
-Subject: [PATCH 32/47] ELF: Add ELF program property parsing support
+Subject: [PATCH 32/46] ELF: Add ELF program property parsing support
 
 ELF program properties will be needed for detecting whether to
 enable optional architecture or ABI features for a new ELF process.
diff --git a/0033-ELF-Introduce-arch_setup_elf_property.patch b/0033-ELF-Introduce-arch_setup_elf_property.patch
index d968e71ac..a6784e045 100644
--- a/0033-ELF-Introduce-arch_setup_elf_property.patch
+++ b/0033-ELF-Introduce-arch_setup_elf_property.patch
@@ -1,7 +1,7 @@
-From 6db249f827a140e92c3b303750d376dbdc9ab56b Mon Sep 17 00:00:00 2001
+From 16aaa6256ad77c75d12346a4b6b1f0793483371e Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 20 Aug 2019 13:20:37 -0700
-Subject: [PATCH 33/47] ELF: Introduce arch_setup_elf_property()
+Subject: [PATCH 33/46] ELF: Introduce arch_setup_elf_property()
 
 An ELF file's .note.gnu.property indicates architecture features of the
 file.  These features are extracted earlier and stored in the struct
diff --git a/0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch b/0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch
index 9f4b718e5..ab4a5eeed 100644
--- a/0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch
+++ b/0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch
@@ -1,7 +1,7 @@
-From 834d9e13ba97e56a9d3cb58cb25f2949b476bf04 Mon Sep 17 00:00:00 2001
+From a7595ab5fdbacd7e6fa907323410650a1f615e52 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 3 Oct 2017 16:07:12 -0700
-Subject: [PATCH 34/47] x86/cet/shstk: ELF header parsing for Shadow Stack
+Subject: [PATCH 34/46] x86/cet/shstk: ELF header parsing for Shadow Stack
 
 Check an ELF file's .note.gnu.property, and setup Shadow Stack if the
 application supports it.
@@ -17,16 +17,16 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  3 files changed, 44 insertions(+)
 
 diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
-index d80a7299c416..d3a717d03bda 100644
+index 5a598741da67..561cc1632a2b 100644
 --- a/arch/x86/Kconfig
 +++ b/arch/x86/Kconfig
-@@ -1966,6 +1966,8 @@ config X86_INTEL_SHADOW_STACK_USER
- 	select ARCH_USES_HIGH_VMA_FLAGS
+@@ -1970,6 +1970,8 @@ config X86_INTEL_SHADOW_STACK_USER
  	select X86_INTEL_CET
- 	select ARCH_HAS_SHSTK
+ 	select ARCH_HAS_COW_MAPPING
+ 	select ARCH_HAS_SHADOW_STACK
 +	select ARCH_USE_GNU_PROPERTY
 +	select ARCH_BINFMT_ELF_STATE
- 	---help---
+ 	help
  	  Shadow Stacks provides protection against program stack
  	  corruption.  It's a hardware feature.  This only matters
 diff --git a/arch/x86/include/asm/elf.h b/arch/x86/include/asm/elf.h
diff --git a/0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch b/0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch
index e8e2c425c..d0dee74bc 100644
--- a/0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch
+++ b/0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch
@@ -1,7 +1,7 @@
-From d202a6827456dd8252fc3d60d2c881daea1eabd7 Mon Sep 17 00:00:00 2001
+From 3f307a583b6257b954e521c6278aef8d2bba25da Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 3 May 2018 12:40:57 -0700
-Subject: [PATCH 35/47] x86/cet/shstk: Handle thread Shadow Stack
+Subject: [PATCH 35/46] x86/cet/shstk: Handle thread Shadow Stack
 
 The shadow stack for clone/fork is handled as the following:
 
@@ -79,7 +79,7 @@ index 4e55370e48e8..bb7a4a2d6923 100644
  	loadsegment(fs, 0);			\
  } while (0)
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
-index 8b901fcb159b..e510d79e70a3 100644
+index c9344ad50ba5..afedfbee420a 100644
 --- a/arch/x86/kernel/cet.c
 +++ b/arch/x86/kernel/cet.c
 @@ -169,6 +169,47 @@ int cet_setup_shstk(void)
diff --git a/0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch b/0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
deleted file mode 100644
index f17f19b8c..000000000
--- a/0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
+++ /dev/null
@@ -1,41 +0,0 @@
-From d3c1a5e61c0ebec81d59cfa34efe13683a3f64db Mon Sep 17 00:00:00 2001
-From: Yu-cheng Yu <yu-cheng.yu@intel.com>
-Date: Thu, 13 Sep 2018 12:36:48 -0700
-Subject: [PATCH 36/47] mm/mmap: Add Shadow Stack pages to memory accounting
-
-Add Shadow Stack pages to memory accounting.
-
-v8:
-- Change Shadow Stake pages from data_vm to stack_vm.
-
-Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
----
- mm/mmap.c | 5 +++++
- 1 file changed, 5 insertions(+)
-
-diff --git a/mm/mmap.c b/mm/mmap.c
-index f609e9ec4a25..bf502e61aace 100644
---- a/mm/mmap.c
-+++ b/mm/mmap.c
-@@ -1681,6 +1681,9 @@ static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)
- 	if (file && is_file_hugepages(file))
- 		return 0;
- 
-+	if (arch_cow_mapping(vm_flags))
-+		return 1;
-+
- 	return (vm_flags & (VM_NORESERVE | VM_SHARED | VM_WRITE)) == VM_WRITE;
- }
- 
-@@ -3318,6 +3321,8 @@ void vm_stat_account(struct mm_struct *mm, vm_flags_t flags, long npages)
- 		mm->stack_vm += npages;
- 	else if (is_data_mapping(flags))
- 		mm->data_vm += npages;
-+	else if (arch_cow_mapping(flags))
-+		mm->stack_vm += npages;
- }
- 
- static vm_fault_t special_mapping_fault(struct vm_fault *vmf);
--- 
-2.26.0
-
diff --git a/0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch b/0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
similarity index 91%
rename from 0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
rename to 0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
index 15adbb2f7..8ca520d74 100644
--- a/0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
+++ b/0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
@@ -1,7 +1,7 @@
-From f32ffb963c3372c63639ed942048460cf3346230 Mon Sep 17 00:00:00 2001
+From dc64f44727fe86d07fb99d13cfe10223c480a188 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 3 May 2018 13:04:29 -0700
-Subject: [PATCH 37/47] x86/cet/shstk: Add arch_prctl functions for Shadow
+Subject: [PATCH 36/46] x86/cet/shstk: Add arch_prctl functions for Shadow
  Stack
 
 arch_prctl(ARCH_X86_CET_STATUS, u64 *addr)
@@ -29,6 +29,7 @@ arch_prctl(ARCH_X86_CET_ALLOC_SHSTK, u64 *addr)
     contains the address of the new SHSTK.
 
 v10:
+- Verify CET is enabled before handling arch_prctl.
 - Change input parameters from unsigned long to u64, to make it clear they
   are 64-bit.
 
@@ -38,9 +39,9 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  arch/x86/include/uapi/asm/prctl.h |  5 ++
  arch/x86/kernel/Makefile          |  2 +-
  arch/x86/kernel/cet.c             | 29 +++++++++++
- arch/x86/kernel/cet_prctl.c       | 80 +++++++++++++++++++++++++++++++
+ arch/x86/kernel/cet_prctl.c       | 87 +++++++++++++++++++++++++++++++
  arch/x86/kernel/process.c         |  4 +-
- 6 files changed, 121 insertions(+), 3 deletions(-)
+ 6 files changed, 128 insertions(+), 3 deletions(-)
  create mode 100644 arch/x86/kernel/cet_prctl.c
 
 diff --git a/arch/x86/include/asm/cet.h b/arch/x86/include/asm/cet.h
@@ -95,7 +96,7 @@ index e9cc2551573b..0b621e2afbdc 100644
  ###
  # 64 bit specific files
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
-index e510d79e70a3..5681c0b13dec 100644
+index afedfbee420a..a10699d79b54 100644
 --- a/arch/x86/kernel/cet.c
 +++ b/arch/x86/kernel/cet.c
 @@ -145,6 +145,35 @@ static int create_rstor_token(bool ia32, unsigned long ssp,
@@ -136,10 +137,10 @@ index e510d79e70a3..5681c0b13dec 100644
  	unsigned long addr, size;
 diff --git a/arch/x86/kernel/cet_prctl.c b/arch/x86/kernel/cet_prctl.c
 new file mode 100644
-index 000000000000..5c6a91b7922a
+index 000000000000..0b4df3cbe2de
 --- /dev/null
 +++ b/arch/x86/kernel/cet_prctl.c
-@@ -0,0 +1,80 @@
+@@ -0,0 +1,87 @@
 +/* SPDX-License-Identifier: GPL-2.0 */
 +
 +#include <linux/errno.h>
@@ -195,12 +196,19 @@ index 000000000000..5c6a91b7922a
 +
 +int prctl_cet(int option, u64 arg2)
 +{
-+	struct cet_status *cet = &current->thread.cet;
++	struct cet_status *cet;
 +
-+	switch (option) {
-+	case ARCH_X86_CET_STATUS:
++	BUILD_BUG_ON(!IS_ENABLED(CONFIG_X86_INTEL_CET));
++
++	if (option == ARCH_X86_CET_STATUS)
 +		return handle_get_status(arg2);
 +
++	if (!static_cpu_has(X86_FEATURE_SHSTK))
++		return -EINVAL;
++
++	cet = &current->thread.cet;
++
++	switch (option) {
 +	case ARCH_X86_CET_DISABLE:
 +		if (cet->locked)
 +			return -EPERM;
diff --git a/0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch b/0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
similarity index 85%
rename from 0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
rename to 0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
index ddb7b633e..cb0e6f478 100644
--- a/0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
+++ b/0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
@@ -1,7 +1,7 @@
-From 535ec115aa4342c58557a992f2912baaef5cc931 Mon Sep 17 00:00:00 2001
+From f2e80a54916cd51a5c4dbeca6046c45883fdb45f Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Wed, 4 Oct 2017 12:35:32 -0700
-Subject: [PATCH 38/47] x86/cet/ibt: Add Kconfig option for user-mode Indirect
+Subject: [PATCH 37/46] x86/cet/ibt: Add Kconfig option for user-mode Indirect
  Branch Tracking
 
 Introduce Kconfig option X86_INTEL_BRANCH_TRACKING_USER.
@@ -21,10 +21,10 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  1 file changed, 16 insertions(+)
 
 diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
-index d3a717d03bda..c4beaab7ec2a 100644
+index 561cc1632a2b..e769a55e07ed 100644
 --- a/arch/x86/Kconfig
 +++ b/arch/x86/Kconfig
-@@ -1979,6 +1979,22 @@ config X86_INTEL_SHADOW_STACK_USER
+@@ -1983,6 +1983,22 @@ config X86_INTEL_SHADOW_STACK_USER
  
  	  If unsure, say y.
  
@@ -34,7 +34,7 @@ index d3a717d03bda..c4beaab7ec2a 100644
 +	depends on CPU_SUP_INTEL && X86_64
 +	depends on $(cc-option,-fcf-protection)
 +	select X86_INTEL_CET
-+	---help---
++	help
 +	  Indirect Branch Tracking (IBT) provides protection against
 +	  CALL-/JMP-oriented programming attacks.  It is active when
 +	  the kernel has this feature enabled, and the processor and
diff --git a/0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch b/0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
similarity index 95%
rename from 0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
rename to 0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
index fca731736..dd8f70b2b 100644
--- a/0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
+++ b/0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
@@ -1,7 +1,7 @@
-From c9021790c2872a0e51f782891f13034a23cd951a Mon Sep 17 00:00:00 2001
+From fd5925b254106d88b395a11e20ef836fb53368cb Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Thu, 3 May 2018 13:30:56 -0700
-Subject: [PATCH 39/47] x86/cet/ibt: User-mode Indirect Branch Tracking support
+Subject: [PATCH 38/46] x86/cet/ibt: User-mode Indirect Branch Tracking support
 
 Introduce user-mode Indirect Branch Tracking (IBT) support.  Update setup
 routines to include IBT.
@@ -72,7 +72,7 @@ index a0e1b24cfa02..52c9c07cfacc 100644
  
  #endif /* _ASM_X86_DISABLED_FEATURES_H */
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
-index 5681c0b13dec..5fc72506b226 100644
+index a10699d79b54..ad2c42a607ce 100644
 --- a/arch/x86/kernel/cet.c
 +++ b/arch/x86/kernel/cet.c
 @@ -13,6 +13,8 @@
@@ -84,7 +84,7 @@ index 5681c0b13dec..5fc72506b226 100644
  #include <asm/msr.h>
  #include <asm/user.h>
  #include <asm/fpu/internal.h>
-@@ -345,3 +347,34 @@ int cet_setup_signal(bool ia32, unsigned long rstor_addr, struct sc_ext *sc_ext)
+@@ -360,3 +362,34 @@ int cet_setup_signal(bool ia32, unsigned long rstor_addr, struct sc_ext *sc_ext)
  
  	return 0;
  }
diff --git a/0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch b/0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
similarity index 90%
rename from 0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
rename to 0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
index 38e2a4719..72b180e9c 100644
--- a/0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
+++ b/0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
@@ -1,7 +1,7 @@
-From 1121428dd12465ab721be20059cd07ddbde21117 Mon Sep 17 00:00:00 2001
+From f827066c9f71d6f82b08d3f494e27e8a5f4f1f96 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 28 May 2019 12:29:14 -0700
-Subject: [PATCH 40/47] x86/cet/ibt: Handle signals for Indirect Branch
+Subject: [PATCH 39/46] x86/cet/ibt: Handle signals for Indirect Branch
  Tracking
 
 Indirect Branch Tracking setting does not change in signal delivering or
@@ -22,10 +22,10 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  2 files changed, 30 insertions(+), 5 deletions(-)
 
 diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
-index 5fc72506b226..264e25bf9a20 100644
+index ad2c42a607ce..37445f49949b 100644
 --- a/arch/x86/kernel/cet.c
 +++ b/arch/x86/kernel/cet.c
-@@ -297,6 +297,13 @@ int cet_restore_signal(bool ia32, struct sc_ext *sc_ext)
+@@ -312,6 +312,13 @@ int cet_restore_signal(bool ia32, struct sc_ext *sc_ext)
  		msr_val |= MSR_IA32_CET_SHSTK_EN;
  	}
  
@@ -39,7 +39,7 @@ index 5fc72506b226..264e25bf9a20 100644
  	if (test_thread_flag(TIF_NEED_FPU_LOAD))
  		cet_user_state->user_cet = msr_val;
  	else
-@@ -339,9 +346,25 @@ int cet_setup_signal(bool ia32, unsigned long rstor_addr, struct sc_ext *sc_ext)
+@@ -354,9 +361,25 @@ int cet_setup_signal(bool ia32, unsigned long rstor_addr, struct sc_ext *sc_ext)
  		sc_ext->ssp = new_ssp;
  	}
  
diff --git a/0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch b/0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
similarity index 84%
rename from 0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
rename to 0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
index b3f71b504..3d29fcf57 100644
--- a/0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
+++ b/0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
@@ -1,7 +1,7 @@
-From 2c1bff2af629c2d2f4b03b823517860d21207711 Mon Sep 17 00:00:00 2001
+From 2bb7618b0a3f8bbe5352b72e1e6d76021e291121 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Tue, 30 Apr 2019 15:16:22 -0700
-Subject: [PATCH 41/47] x86/cet/ibt: ELF header parsing for Indirect Branch
+Subject: [PATCH 40/46] x86/cet/ibt: ELF header parsing for Indirect Branch
  Tracking
 
 Update arch_setup_elf_property() for Indirect Branch Tracking.
@@ -16,16 +16,16 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  2 files changed, 10 insertions(+)
 
 diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
-index c4beaab7ec2a..d90dc15115c7 100644
+index e769a55e07ed..283ad77e0eb0 100644
 --- a/arch/x86/Kconfig
 +++ b/arch/x86/Kconfig
-@@ -1985,6 +1985,8 @@ config X86_INTEL_BRANCH_TRACKING_USER
+@@ -1989,6 +1989,8 @@ config X86_INTEL_BRANCH_TRACKING_USER
  	depends on CPU_SUP_INTEL && X86_64
  	depends on $(cc-option,-fcf-protection)
  	select X86_INTEL_CET
 +	select ARCH_USE_GNU_PROPERTY
 +	select ARCH_BINFMT_ELF_STATE
- 	---help---
+ 	help
  	  Indirect Branch Tracking (IBT) provides protection against
  	  CALL-/JMP-oriented programming attacks.  It is active when
 diff --git a/arch/x86/kernel/process_64.c b/arch/x86/kernel/process_64.c
diff --git a/0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch b/0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
similarity index 59%
rename from 0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
rename to 0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
index 043a1b48e..7a755508f 100644
--- a/0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
+++ b/0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
@@ -1,7 +1,7 @@
-From 27da2e94ac68060934d370ca71ecefea58a41d01 Mon Sep 17 00:00:00 2001
+From ee1dbbdd1cf83a21712ab6aa33902af7af48623b Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
 Date: Tue, 21 Aug 2018 14:13:05 -0700
-Subject: [PATCH 42/47] x86/cet/ibt: Add arch_prctl functions for Indirect
+Subject: [PATCH 41/46] x86/cet/ibt: Add arch_prctl functions for Indirect
  Branch Tracking
 
 Update ARCH_X86_CET_STATUS and ARCH_X86_CET_DISABLE for Indirect Branch
@@ -10,11 +10,11 @@ Tracking.
 Signed-off-by: H.J. Lu <hjl.tools@gmail.com>
 Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
 ---
- arch/x86/kernel/cet_prctl.c | 4 ++++
- 1 file changed, 4 insertions(+)
+ arch/x86/kernel/cet_prctl.c | 7 ++++++-
+ 1 file changed, 6 insertions(+), 1 deletion(-)
 
 diff --git a/arch/x86/kernel/cet_prctl.c b/arch/x86/kernel/cet_prctl.c
-index 5c6a91b7922a..b6fdb8230381 100644
+index 0b4df3cbe2de..c3c8de3b0321 100644
 --- a/arch/x86/kernel/cet_prctl.c
 +++ b/arch/x86/kernel/cet_prctl.c
 @@ -20,6 +20,8 @@ static int handle_get_status(u64 arg2)
@@ -26,7 +26,17 @@ index 5c6a91b7922a..b6fdb8230381 100644
  
  	buf[0] = (u64)features;
  	buf[1] = (u64)cet->shstk_base;
-@@ -64,6 +66,8 @@ int prctl_cet(int option, u64 arg2)
+@@ -60,7 +62,8 @@ int prctl_cet(int option, u64 arg2)
+ 	if (option == ARCH_X86_CET_STATUS)
+ 		return handle_get_status(arg2);
+ 
+-	if (!static_cpu_has(X86_FEATURE_SHSTK))
++	if (!static_cpu_has(X86_FEATURE_SHSTK) &&
++	    !static_cpu_has(X86_FEATURE_IBT))
+ 		return -EINVAL;
+ 
+ 	cet = &current->thread.cet;
+@@ -71,6 +74,8 @@ int prctl_cet(int option, u64 arg2)
  			return -EPERM;
  		if (arg2 & GNU_PROPERTY_X86_FEATURE_1_SHSTK)
  			cet_disable_free_shstk(current);
diff --git a/0043-x86-cet-Add-PTRACE-interface-for-CET.patch b/0042-x86-cet-Add-PTRACE-interface-for-CET.patch
similarity index 97%
rename from 0043-x86-cet-Add-PTRACE-interface-for-CET.patch
rename to 0042-x86-cet-Add-PTRACE-interface-for-CET.patch
index a9c617087..37db79302 100644
--- a/0043-x86-cet-Add-PTRACE-interface-for-CET.patch
+++ b/0042-x86-cet-Add-PTRACE-interface-for-CET.patch
@@ -1,7 +1,7 @@
-From f5ba07b4ad28bd978883c2895911bb5546cb76c5 Mon Sep 17 00:00:00 2001
+From 90ef8016b50b1407aa9ce4a3d0cb0f814f158f97 Mon Sep 17 00:00:00 2001
 From: Yu-cheng Yu <yu-cheng.yu@intel.com>
 Date: Mon, 23 Apr 2018 12:55:13 -0700
-Subject: [PATCH 43/47] x86/cet: Add PTRACE interface for CET
+Subject: [PATCH 42/46] x86/cet: Add PTRACE interface for CET
 
 Add REGSET_CET64/REGSET_CET32 to get/set CET MSRs:
 
diff --git a/0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch b/0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
similarity index 94%
rename from 0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
rename to 0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
index 3b517a920..f51f3c95c 100644
--- a/0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
+++ b/0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
@@ -1,7 +1,7 @@
-From d8c99c51830e208f237d85439d35c5d7b3f74d98 Mon Sep 17 00:00:00 2001
+From 3fe6ac11063803a36ebb511d6d3b5258a1b78c46 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
 Date: Thu, 30 Jan 2020 12:39:09 -0800
-Subject: [PATCH 44/47] Discard .note.gnu.property sections in generic NOTES
+Subject: [PATCH 43/46] Discard .note.gnu.property sections in generic NOTES
 
 With the command-line option, -mx86-used-note=yes, the x86 assembler
 in binutils 2.32 and above generates a program property note in a note
diff --git a/0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch b/0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
similarity index 86%
rename from 0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
rename to 0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
index 9a5e5d904..9a7939fd1 100644
--- a/0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
+++ b/0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
@@ -1,7 +1,7 @@
-From 2cc0b46e7e5828bffd1de122dad3aea4ec64c3a8 Mon Sep 17 00:00:00 2001
+From 30ef0ae1c022469caec750ab52b208d37503b41c Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
 Date: Fri, 28 Sep 2018 06:21:50 -0700
-Subject: [PATCH 45/47] x86/vdso/32: Add ENDBR32 to __kernel_vsyscall entry
+Subject: [PATCH 44/46] x86/vdso/32: Add ENDBR32 to __kernel_vsyscall entry
  point
 
 Add ENDBR32 to __kernel_vsyscall entry point.
diff --git a/0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch b/0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
similarity index 89%
rename from 0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
rename to 0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
index df1187d28..e182c8a1d 100644
--- a/0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
+++ b/0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
@@ -1,7 +1,7 @@
-From 489a32f399221771a2517d71c8b0241714de0578 Mon Sep 17 00:00:00 2001
+From d33c06ab43b5b907345313c697c0163baa832ab9 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
 Date: Fri, 16 Mar 2018 04:18:48 -0700
-Subject: [PATCH 46/47] x86/vdso: Insert endbr32/endbr64 to vDSO
+Subject: [PATCH 45/46] x86/vdso: Insert endbr32/endbr64 to vDSO
 
 When Indirect Branch Tracking (IBT) is enabled, vDSO functions may be
 called indirectly, and must have ENDBR32 or ENDBR64 as the first
diff --git a/0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch b/0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
similarity index 87%
rename from 0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
rename to 0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
index c9e21fd5f..40f4aae50 100644
--- a/0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
+++ b/0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
@@ -1,7 +1,7 @@
-From 94f75ee533a16377ff55f1ee2da4c9e5cc1b3e12 Mon Sep 17 00:00:00 2001
+From 7e8368b1af08d4a3f7b8456bdffb4cd8760a5bc3 Mon Sep 17 00:00:00 2001
 From: "H.J. Lu" <hjl.tools@gmail.com>
 Date: Wed, 29 Jan 2020 08:44:11 -0800
-Subject: [PATCH 47/47] x86: Disallow vsyscall emulation when CET is enabled
+Subject: [PATCH 46/46] x86: Disallow vsyscall emulation when CET is enabled
 
 Emulation of the legacy vsyscall page is required by some programs built
 before 2013.  Newer programs after 2013 don't use it.  Disallow vsyscall
@@ -15,7 +15,7 @@ Signed-off-by: Yu-cheng Yu <yu-cheng.yu@intel.com>
  1 file changed, 6 insertions(+), 2 deletions(-)
 
 diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
-index d90dc15115c7..059419e70430 100644
+index 283ad77e0eb0..86c224f670e8 100644
 --- a/arch/x86/Kconfig
 +++ b/arch/x86/Kconfig
 @@ -1210,7 +1210,7 @@ config X86_ESPFIX64
@@ -36,7 +36,7 @@ index d90dc15115c7..059419e70430 100644
  config X86_IOPL_IOPERM
  	bool "IOPERM and IOPL Emulation"
  	default y
-@@ -2377,7 +2379,7 @@ config COMPAT_VDSO
+@@ -2381,7 +2383,7 @@ config COMPAT_VDSO
  
  choice
  	prompt "vsyscall table for legacy applications"
@@ -45,7 +45,7 @@ index d90dc15115c7..059419e70430 100644
  	default LEGACY_VSYSCALL_XONLY
  	help
  	  Legacy user code that does not know how to find the vDSO expects
-@@ -2394,6 +2396,8 @@ choice
+@@ -2398,6 +2400,8 @@ choice
  
  	  If unsure, select "Emulate execution only".
  
diff --git a/kernel.spec b/kernel.spec
index e6cde9035..3f6845c87 100644
--- a/kernel.spec
+++ b/kernel.spec
@@ -15,19 +15,19 @@ Patch200012: 0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.patch
 Patch200013: 0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch
 Patch200014: 0014-x86-cet-Add-control-protection-fault-handler.patch
 Patch200015: 0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch
-Patch200016: 0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
-Patch200017: 0017-Add-guard-pages-around-a-Shadow-Stack.patch
-Patch200018: 0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
-Patch200019: 0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch
-Patch200020: 0020-x86-mm-Introduce-_PAGE_COW.patch
-Patch200021: 0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
-Patch200022: 0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
-Patch200023: 0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
-Patch200024: 0024-x86-mm-Introduce-arch_cow_mapping.patch
-Patch200025: 0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch
-Patch200026: 0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch
-Patch200027: 0027-mm-Fix-do_anonymous_page.patch
-Patch200028: 0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
+Patch200016: 0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
+Patch200017: 0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch
+Patch200018: 0018-x86-mm-Introduce-_PAGE_COW.patch
+Patch200019: 0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
+Patch200020: 0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
+Patch200021: 0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
+Patch200022: 0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
+Patch200023: 0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch
+Patch200024: 0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch
+Patch200025: 0025-mm-Update-do_anonymous_page-and-do_numa_page.patch
+Patch200026: 0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
+Patch200027: 0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch
+Patch200028: 0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
 Patch200029: 0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch
 Patch200030: 0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch
 Patch200031: 0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch
@@ -35,18 +35,17 @@ Patch200032: 0032-ELF-Add-ELF-program-property-parsing-support.patch
 Patch200033: 0033-ELF-Introduce-arch_setup_elf_property.patch
 Patch200034: 0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch
 Patch200035: 0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch
-Patch200036: 0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
-Patch200037: 0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
-Patch200038: 0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
-Patch200039: 0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
-Patch200040: 0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
-Patch200041: 0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
-Patch200042: 0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
-Patch200043: 0043-x86-cet-Add-PTRACE-interface-for-CET.patch
-Patch200044: 0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
-Patch200045: 0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
-Patch200046: 0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
-Patch200047: 0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
+Patch200036: 0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
+Patch200037: 0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
+Patch200038: 0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
+Patch200039: 0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
+Patch200040: 0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
+Patch200041: 0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
+Patch200042: 0042-x86-cet-Add-PTRACE-interface-for-CET.patch
+Patch200043: 0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
+Patch200044: 0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
+Patch200045: 0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
+Patch200046: 0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
 
 # We have to override the new %%install behavior because, well... the kernel is special.
 %global __spec_install_pre %{___build_pre}
@@ -1272,19 +1271,19 @@ ApplyOptionalPatch 0012-x86-cpufeatures-Add-CET-CPU-feature-flags-for-Contro.pat
 ApplyOptionalPatch 0013-x86-fpu-xstate-Introduce-CET-MSR-XSAVES-supervisor-s.patch
 ApplyOptionalPatch 0014-x86-cet-Add-control-protection-fault-handler.patch
 ApplyOptionalPatch 0015-x86-cet-shstk-Add-Kconfig-option-for-user-mode-Shado.patch
-ApplyOptionalPatch 0016-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
-ApplyOptionalPatch 0017-Add-guard-pages-around-a-Shadow-Stack.patch
-ApplyOptionalPatch 0018-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
-ApplyOptionalPatch 0019-x86-mm-Remove-_PAGE_DIRTY-from-kernel-RO-pages.patch
-ApplyOptionalPatch 0020-x86-mm-Introduce-_PAGE_COW.patch
-ApplyOptionalPatch 0021-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
-ApplyOptionalPatch 0022-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
-ApplyOptionalPatch 0023-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
-ApplyOptionalPatch 0024-x86-mm-Introduce-arch_cow_mapping.patch
-ApplyOptionalPatch 0025-x86-mm-Shadow-Stack-page-fault-error-checking.patch
-ApplyOptionalPatch 0026-Update-maybe_mkwrite-maybe_pmd_mkwrite.patch
-ApplyOptionalPatch 0027-mm-Fix-do_anonymous_page.patch
-ApplyOptionalPatch 0028-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
+ApplyOptionalPatch 0016-x86-mm-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_HW.patch
+ApplyOptionalPatch 0017-x86-mm-Remove-_PAGE_DIRTY_HW-from-kernel-RO-pages.patch
+ApplyOptionalPatch 0018-x86-mm-Introduce-_PAGE_COW.patch
+ApplyOptionalPatch 0019-drm-i915-gvt-Change-_PAGE_DIRTY-to-_PAGE_DIRTY_BITS.patch
+ApplyOptionalPatch 0020-x86-mm-Update-pte_modify-and-pmd_modify-for-_PAGE_CO.patch
+ApplyOptionalPatch 0021-x86-mm-Update-ptep_set_wrprotect-and-pmdp_set_wrprot.patch
+ApplyOptionalPatch 0022-mm-Introduce-VM_SHSTK-for-Shadow-Stack-memory.patch
+ApplyOptionalPatch 0023-x86-mm-Shadow-Stack-page-fault-error-checking.patch
+ApplyOptionalPatch 0024-x86-mm-Update-is_cow_mapping-and-maybe_mkwrite-for-s.patch
+ApplyOptionalPatch 0025-mm-Update-do_anonymous_page-and-do_numa_page.patch
+ApplyOptionalPatch 0026-mm-Update-can_follow_write_pte-for-Shadow-Stack.patch
+ApplyOptionalPatch 0027-x86-mm-Add-guard-pages-around-a-Shadow-Stack.patch
+ApplyOptionalPatch 0028-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
 ApplyOptionalPatch 0029-x86-cet-shstk-User-mode-Shadow-Stack-support.patch
 ApplyOptionalPatch 0030-x86-cet-shstk-Handle-signals-for-Shadow-Stack.patch
 ApplyOptionalPatch 0031-ELF-UAPI-and-Kconfig-additions-for-ELF-program-prope.patch
@@ -1292,18 +1291,17 @@ ApplyOptionalPatch 0032-ELF-Add-ELF-program-property-parsing-support.patch
 ApplyOptionalPatch 0033-ELF-Introduce-arch_setup_elf_property.patch
 ApplyOptionalPatch 0034-x86-cet-shstk-ELF-header-parsing-for-Shadow-Stack.patch
 ApplyOptionalPatch 0035-x86-cet-shstk-Handle-thread-Shadow-Stack.patch
-ApplyOptionalPatch 0036-mm-mmap-Add-Shadow-Stack-pages-to-memory-accounting.patch
-ApplyOptionalPatch 0037-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
-ApplyOptionalPatch 0038-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
-ApplyOptionalPatch 0039-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
-ApplyOptionalPatch 0040-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
-ApplyOptionalPatch 0041-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
-ApplyOptionalPatch 0042-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
-ApplyOptionalPatch 0043-x86-cet-Add-PTRACE-interface-for-CET.patch
-ApplyOptionalPatch 0044-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
-ApplyOptionalPatch 0045-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
-ApplyOptionalPatch 0046-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
-ApplyOptionalPatch 0047-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
+ApplyOptionalPatch 0036-x86-cet-shstk-Add-arch_prctl-functions-for-Shadow-St.patch
+ApplyOptionalPatch 0037-x86-cet-ibt-Add-Kconfig-option-for-user-mode-Indirec.patch
+ApplyOptionalPatch 0038-x86-cet-ibt-User-mode-Indirect-Branch-Tracking-suppo.patch
+ApplyOptionalPatch 0039-x86-cet-ibt-Handle-signals-for-Indirect-Branch-Track.patch
+ApplyOptionalPatch 0040-x86-cet-ibt-ELF-header-parsing-for-Indirect-Branch-T.patch
+ApplyOptionalPatch 0041-x86-cet-ibt-Add-arch_prctl-functions-for-Indirect-Br.patch
+ApplyOptionalPatch 0042-x86-cet-Add-PTRACE-interface-for-CET.patch
+ApplyOptionalPatch 0043-Discard-.note.gnu.property-sections-in-generic-NOTES.patch
+ApplyOptionalPatch 0044-x86-vdso-32-Add-ENDBR32-to-__kernel_vsyscall-entry-p.patch
+ApplyOptionalPatch 0045-x86-vdso-Insert-endbr32-endbr64-to-vDSO.patch
+ApplyOptionalPatch 0046-x86-Disallow-vsyscall-emulation-when-CET-is-enabled.patch
 # END OF PATCH APPLICATIONS
 
 # Any further pre-build tree manipulations happen here.
-- 
2.26.0

