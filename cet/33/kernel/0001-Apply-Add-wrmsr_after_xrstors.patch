From a55bc39c5a33faadf0e935ce2eceb7912c670a7d Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Thu, 20 Aug 2020 21:48:41 -0700
Subject: [PATCH] Apply Add wrmsr_after_xrstors()

---
 0001-Add-wrmsr_after_xrstors.patch | 137 +++++++++++++++++++++++++++++
 kernel.spec                        |   2 +
 2 files changed, 139 insertions(+)
 create mode 100644 0001-Add-wrmsr_after_xrstors.patch

diff --git a/0001-Add-wrmsr_after_xrstors.patch b/0001-Add-wrmsr_after_xrstors.patch
new file mode 100644
index 000000000..3b4ccfece
--- /dev/null
+++ b/0001-Add-wrmsr_after_xrstors.patch
@@ -0,0 +1,137 @@
+From 310c617efe20371750fdf31cbbbe0562b0fb41b7 Mon Sep 17 00:00:00 2001
+From: Yu-cheng Yu <yu-cheng.yu@intel.com>
+Date: Wed, 19 Aug 2020 14:47:14 -0700
+Subject: [PATCH] Add wrmsr_after_xrstors()
+
+Call wrmsr_after_xrstors() in switch_fpu_return.
+---
+ arch/x86/include/asm/cet.h          |  6 ++++--
+ arch/x86/include/asm/fpu/internal.h | 14 ++++++++++++++
+ arch/x86/kernel/cet.c               | 11 +++++++++--
+ arch/x86/kernel/fpu/core.c          |  1 +
+ arch/x86/kernel/process.c           |  4 ++--
+ 5 files changed, 30 insertions(+), 6 deletions(-)
+
+diff --git a/arch/x86/include/asm/cet.h b/arch/x86/include/asm/cet.h
+index 916ac2a0404c..08fa511cb3f4 100644
+--- a/arch/x86/include/asm/cet.h
++++ b/arch/x86/include/asm/cet.h
+@@ -14,6 +14,7 @@ struct sc_ext;
+ struct cet_status {
+ 	unsigned long	shstk_base;
+ 	unsigned long	shstk_size;
++	unsigned int	wrmsr_after_xrstors:1;
+ 	unsigned int	locked:1;
+ 	unsigned int	ibt_enabled:1;
+ };
+@@ -21,7 +22,7 @@ struct cet_status {
+ #ifdef CONFIG_X86_INTEL_CET
+ int prctl_cet(int option, u64 arg2);
+ int cet_setup_shstk(void);
+-int cet_setup_thread_shstk(struct task_struct *p);
++int cet_setup_thread_shstk(struct task_struct *p, unsigned long clone_flags);
+ unsigned long cet_alloc_shstk(unsigned long size, int flags);
+ void cet_disable_free_shstk(struct task_struct *p);
+ int cet_verify_rstor_token(bool ia32, unsigned long ssp, unsigned long *new_ssp);
+@@ -31,7 +32,8 @@ int cet_setup_ibt(void);
+ void cet_disable_ibt(void);
+ #else
+ static inline int prctl_cet(int option, u64 arg2) { return -EINVAL; }
+-static inline int cet_setup_thread_shstk(struct task_struct *p) { return 0; }
++static inline int cet_setup_thread_shstk(struct task_struct *p,
++					 unsigned long clone_flags) { return 0; }
+ static inline void cet_disable_free_shstk(struct task_struct *p) {}
+ static inline void cet_restore_signal(struct sc_ext *sc) { return; }
+ static inline int cet_setup_signal(bool ia32, unsigned long rstor,
+diff --git a/arch/x86/include/asm/fpu/internal.h b/arch/x86/include/asm/fpu/internal.h
+index 8bf59b5b82b7..8e63e9776ae6 100644
+--- a/arch/x86/include/asm/fpu/internal.h
++++ b/arch/x86/include/asm/fpu/internal.h
+@@ -74,6 +74,20 @@ static __always_inline __pure bool use_fxsr(void)
+ 	return static_cpu_has(X86_FEATURE_FXSR);
+ }
+ 
++static inline void wrmsr_after_xrstors(void)
++{
++#ifdef CONFIG_X86_INTEL_SHADOW_STACK_USER
++	if (current->thread.cet.wrmsr_after_xrstors) {
++		struct cet_user_state *cet_user;
++		current->thread.cet.wrmsr_after_xrstors = 0;
++		cet_user = get_xsave_addr(&current->thread.fpu.state.xsave,
++					  XFEATURE_CET_USER);
++		if (cet_user)
++			wrmsrl(MSR_IA32_PL3_SSP, cet_user->user_ssp);
++	}
++#endif
++}
++
+ /*
+  * fpstate handling functions:
+  */
+diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
+index 92b81560eafc..9f7279ce387f 100644
+--- a/arch/x86/kernel/cet.c
++++ b/arch/x86/kernel/cet.c
+@@ -200,7 +200,7 @@ int cet_setup_shstk(void)
+ 	return 0;
+ }
+ 
+-int cet_setup_thread_shstk(struct task_struct *tsk)
++int cet_setup_thread_shstk(struct task_struct *tsk, unsigned long clone_flags)
+ {
+ 	unsigned long addr, size;
+ 	struct cet_user_state *state;
+@@ -209,6 +209,11 @@ int cet_setup_thread_shstk(struct task_struct *tsk)
+ 	if (!cet->shstk_size)
+ 		return 0;
+ 
++	cet->wrmsr_after_xrstors = 1;
++
++	if ((clone_flags & (CLONE_VFORK | CLONE_VM)) != CLONE_VM)
++		return 0;
++
+ 	state = get_xsave_addr(&tsk->thread.fpu.state.xsave,
+ 			       XFEATURE_CET_USER);
+ 
+@@ -301,8 +306,10 @@ void cet_restore_signal(struct sc_ext *sc_ext)
+ 		return;
+ 
+ 	if (cet->shstk_size) {
+-		if (test_thread_flag(TIF_NEED_FPU_LOAD))
++		if (test_thread_flag(TIF_NEED_FPU_LOAD)) {
+ 			cet_user_state->user_ssp = sc_ext->ssp;
++			cet->wrmsr_after_xrstors = 1;
++		}
+ 		else
+ 			wrmsrl(MSR_IA32_PL3_SSP, sc_ext->ssp);
+ 
+diff --git a/arch/x86/kernel/fpu/core.c b/arch/x86/kernel/fpu/core.c
+index 15247b96c6ea..073ba71893fc 100644
+--- a/arch/x86/kernel/fpu/core.c
++++ b/arch/x86/kernel/fpu/core.c
+@@ -364,6 +364,7 @@ void switch_fpu_return(void)
+ 		return;
+ 
+ 	__fpregs_load_activate();
++	wrmsr_after_xrstors();
+ }
+ EXPORT_SYMBOL_GPL(switch_fpu_return);
+ 
+diff --git a/arch/x86/kernel/process.c b/arch/x86/kernel/process.c
+index 426557c89b21..bc099a10fe8d 100644
+--- a/arch/x86/kernel/process.c
++++ b/arch/x86/kernel/process.c
+@@ -182,8 +182,8 @@ int copy_thread_tls(unsigned long clone_flags, unsigned long sp,
+ 
+ #ifdef CONFIG_X86_64
+ 	/* Allocate a new shadow stack for pthread */
+-	if (!ret && (clone_flags & (CLONE_VFORK | CLONE_VM)) == CLONE_VM)
+-		ret = cet_setup_thread_shstk(p);
++	if (!ret)
++		ret = cet_setup_thread_shstk(p, clone_flags);
+ #endif
+ 
+ 	if (!ret && unlikely(test_tsk_thread_flag(current, TIF_IO_BITMAP)))
+-- 
+2.26.2
+
diff --git a/kernel.spec b/kernel.spec
index d3f2d50d4..2c1684924 100644
--- a/kernel.spec
+++ b/kernel.spec
@@ -41,6 +41,8 @@ Patch200040: 0040-selftest-x86-Add-CET-quick-test.patch
 
 Patch300001: 0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch
 
+Patch400001: 0001-Add-wrmsr_after_xrstors.patch
+
 # We have to override the new %%install behavior because, well... the kernel is special.
 %global __spec_install_pre %{___build_pre}
 
-- 
2.26.2

