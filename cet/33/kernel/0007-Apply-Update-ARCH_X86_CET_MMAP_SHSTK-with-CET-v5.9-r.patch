From bc88a8dad26fe8f0fbf21483658bfc7759eb3b23 Mon Sep 17 00:00:00 2001
From: "H.J. Lu" <hjl.tools@gmail.com>
Date: Wed, 19 Aug 2020 16:16:41 -0700
Subject: [PATCH 7/8] Apply Update ARCH_X86_CET_MMAP_SHSTK with CET v5.9-rc1

---
 ...X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch | 134 ++++++++++++++++++
 kernel.spec                                   |   2 +
 2 files changed, 136 insertions(+)
 create mode 100644 0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch

diff --git a/0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch b/0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch
new file mode 100644
index 000000000..c9f334c31
--- /dev/null
+++ b/0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch
@@ -0,0 +1,134 @@
+From 6441de444294fd982eef7d33bd49922b97572c34 Mon Sep 17 00:00:00 2001
+From: "H.J. Lu" <hjl.tools@gmail.com>
+Date: Mon, 17 Aug 2020 17:55:33 -0700
+Subject: [PATCH] Update ARCH_X86_CET_MMAP_SHSTK with CET v5.9-rc1
+
+Change ARCH_X86_CET_MMAP_SHSTK to
+
+    arch_prctl(ARCH_X86_CET_MMAP_SHSTK, u64 *args)
+        Allocate a new shadow stack.
+
+        The parameter 'args' is a pointer to a user buffer.
+
+        *args = desired size
+        *(args + 1) = MAP_32BIT or MAP_POPULATE
+
+        On returning, *args is the allocated shadow stack address.
+---
+ arch/x86/include/asm/cet.h  |  2 +-
+ arch/x86/kernel/cet.c       | 16 ++++++++--------
+ arch/x86/kernel/cet_prctl.c | 12 ++++--------
+ 3 files changed, 13 insertions(+), 17 deletions(-)
+
+diff --git a/arch/x86/include/asm/cet.h b/arch/x86/include/asm/cet.h
+index 96372eda0c63..916ac2a0404c 100644
+--- a/arch/x86/include/asm/cet.h
++++ b/arch/x86/include/asm/cet.h
+@@ -22,7 +22,7 @@ struct cet_status {
+ int prctl_cet(int option, u64 arg2);
+ int cet_setup_shstk(void);
+ int cet_setup_thread_shstk(struct task_struct *p);
+-unsigned long cet_alloc_shstk(unsigned long addr, unsigned long size, int flags);
++unsigned long cet_alloc_shstk(unsigned long size, int flags);
+ void cet_disable_free_shstk(struct task_struct *p);
+ int cet_verify_rstor_token(bool ia32, unsigned long ssp, unsigned long *new_ssp);
+ void cet_restore_signal(struct sc_ext *sc);
+diff --git a/arch/x86/kernel/cet.c b/arch/x86/kernel/cet.c
+index 73e156c6f65f..92b81560eafc 100644
+--- a/arch/x86/kernel/cet.c
++++ b/arch/x86/kernel/cet.c
+@@ -57,16 +57,16 @@ static unsigned long cet_get_shstk_addr(void)
+ 	return ssp;
+ }
+ 
+-static unsigned long alloc_shstk(unsigned long addr, unsigned long size, int flags)
++static unsigned long alloc_shstk(unsigned long size, int flags)
+ {
+ 	struct mm_struct *mm = current->mm;
+-	unsigned long populate;
++	unsigned long addr, populate;
+ 
+ 	/* VM_SHSTK requires MAP_ANONYMOUS, MAP_PRIVATE */
+ 	flags |= MAP_ANONYMOUS | MAP_PRIVATE;
+ 
+ 	mmap_write_lock(mm);
+-	addr = do_mmap(NULL, addr, size, PROT_READ, flags, VM_SHSTK, 0,
++	addr = do_mmap(NULL, 0, size, PROT_READ, flags, VM_SHSTK, 0,
+ 		       &populate, NULL);
+ 	mmap_write_unlock(mm);
+ 
+@@ -150,12 +150,12 @@ static int create_rstor_token(bool ia32, unsigned long ssp,
+ 	return 0;
+ }
+ 
+-unsigned long cet_alloc_shstk(unsigned long addr, unsigned long len, int flags)
++unsigned long cet_alloc_shstk(unsigned long len, int flags)
+ {
+ 	unsigned long token;
+-	unsigned long ssp;
++	unsigned long addr, ssp;
+ 
+-	addr = alloc_shstk(addr, round_up(len, PAGE_SIZE), flags);
++	addr = alloc_shstk(round_up(len, PAGE_SIZE), flags);
+ 
+ 	if (IS_ERR_VALUE(addr))
+ 		return addr;
+@@ -185,7 +185,7 @@ int cet_setup_shstk(void)
+ 		return -EOPNOTSUPP;
+ 
+ 	size = round_up(min(rlimit(RLIMIT_STACK), 1UL << 32), PAGE_SIZE);
+-	addr = alloc_shstk(0, size, 0);
++	addr = alloc_shstk(size, 0);
+ 
+ 	if (IS_ERR_VALUE(addr))
+ 		return PTR_ERR((void *)addr);
+@@ -226,7 +226,7 @@ int cet_setup_thread_shstk(struct task_struct *tsk)
+ 	if (in_compat_syscall())
+ 		size /= 4;
+ 	size = round_up(size, PAGE_SIZE);
+-	addr = alloc_shstk(0, size, 0);
++	addr = alloc_shstk(size, 0);
+ 
+ 	if (IS_ERR_VALUE(addr)) {
+ 		cet->shstk_base = 0;
+diff --git a/arch/x86/kernel/cet_prctl.c b/arch/x86/kernel/cet_prctl.c
+index d4688dda3d0c..f12b9d448181 100644
+--- a/arch/x86/kernel/cet_prctl.c
++++ b/arch/x86/kernel/cet_prctl.c
+@@ -35,7 +35,7 @@ static int handle_alloc_shstk(u64 arg2)
+ 	if (get_user(size, (unsigned long __user *)arg2))
+ 		return -EFAULT;
+ 
+-	addr = cet_alloc_shstk(0, size, 0);
++	addr = cet_alloc_shstk(size, 0);
+ 	if (IS_ERR_VALUE(addr))
+ 		return PTR_ERR((void *)addr);
+ 
+@@ -56,21 +56,17 @@ static int handle_mmap_shstk(u64 arg2)
+ 	if (copy_from_user(buf, (unsigned long __user *)arg2, sizeof(buf)))
+ 		return -EFAULT;
+ 
+-	addr = buf[0];
+-	size = buf[1];
++	size = buf[0];
+ 
+ 	/*
+ 	 * Check invalid flags
+ 	 */
+ 	allowed_flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_32BIT | MAP_POPULATE;
+ 
+-	if (buf[2] & ~allowed_flags)
++	if (buf[1] & ~allowed_flags)
+ 		return -EINVAL;
+ 
+-	if (!addr && (buf[2] & MAP_FIXED))
+-		return -EINVAL;
+-
+-	addr = cet_alloc_shstk(addr, size, buf[2]);
++	addr = cet_alloc_shstk(size, buf[1]);
+ 	if (IS_ERR_VALUE(addr))
+ 		return PTR_ERR((void *)addr);
+ 
+-- 
+2.26.2
+
diff --git a/kernel.spec b/kernel.spec
index 5655fa8d5..d3f2d50d4 100644
--- a/kernel.spec
+++ b/kernel.spec
@@ -39,6 +39,8 @@ Patch200038: 0038-selftest-x86-Fix-sigreturn_64-test.patch
 Patch200039: 0039-selftest-x86-Fix-sysret_rip-with-ENDBR.patch
 Patch200040: 0040-selftest-x86-Add-CET-quick-test.patch
 
+Patch300001: 0001-Update-ARCH_X86_CET_MMAP_SHSTK-with-CET-v5.9-rc1.patch
+
 # We have to override the new %%install behavior because, well... the kernel is special.
 %global __spec_install_pre %{___build_pre}
 
-- 
2.26.2

